{"title":"前端性能优化-2","date":"2018-07-22T16:00:00.000Z","author":"Vincent","link":"post/2018-07-23-前端性能优化-2","tags":["前端开发","性能优化"],"updated":"2019-01-02T08:49:00.266Z","content":"<h2 id=\"动画篇\">动画篇<a href=\"post/2018-07-23-前端性能优化-2#动画篇\"></a></h2><h4 id=\"层？重绘？回流和重布局？图层重组？\">层？重绘？回流和重布局？图层重组？<a href=\"post/2018-07-23-前端性能优化-2#层？重绘？回流和重布局？图层重组？\"></a></h4><p>首先要了解CSS的图层的概念（Chrome浏览器）</p>\n<p>浏览器在渲染一个页面时，会将页面分为很多个图层，图层有大有小，每个图层上有一个或多个节点。在渲染DOM的时候，浏览器所做的工作实际上是：</p>\n<ol>\n<li>获取DOM后分割为多个图层</li>\n<li>对每个图层的节点计算样式结果（Recalculate style–样式重计算）</li>\n<li>为每个节点生成图形和位置（Layout–<strong>回流和重布局</strong>）</li>\n<li>将每个节点绘制填充到图层位图中（Paint Setup和Paint–<strong>重绘</strong>）</li>\n<li>图层作为纹理上传至GPU</li>\n<li>符合多个图层到页面上生成最终屏幕图像（Composite Layers–<strong>图层重组</strong>）</li>\n</ol>\n<p>Chrome中满足以下任意情况就会创建图层：</p>\n<ul>\n<li>3D或透视变换（perspective transform）CSS属性</li>\n<li>使用加速视频解码的<code>&lt;video&gt;</code>节点</li>\n<li>拥有3D（WebGL）上下文或加速的2D上下文的<code>&lt;canvas&gt;</code>节点</li>\n<li>混合插件（如Flash）</li>\n<li>对自己的opacity做CSS动画或使用一个动画webkit变换的元素</li>\n<li>拥有加速CSS过滤器的元素</li>\n<li>元素有一个包含复合层的后代节点（一个元素拥有一个子元素，该子元素在自己的层里）</li>\n<li>元素有一个<code>z-index</code>较低且包含一个复合层的兄弟元素（换句话说就是该元素在复合层上面渲染）</li>\n</ul>\n<p>需要注意的是，如果图层中某个元素需要重绘，那么整个图层都需要重绘。比如一个图层包含很多节点，其中有个gif图，gif图的每一帧，都会重回整个图层的其他节点，然后生成最终的图层位图。所以这需要通过特殊的方式来强制gif图属于自己一个图层（translateZ(0)或者translate3d(0,0,0)），CSS3的动画也是一样（好在绝大部分情况浏览器自己会为CSS3动画的节点创建图层）。</p>\n<h4 id=\"触发重布局的属性\">触发重布局的属性<a href=\"post/2018-07-23-前端性能优化-2#触发重布局的属性\"></a></h4><p>有些节点，当你改变他时，会需要重新布局（这也意味着需要重新计算其他被影响的节点的位置和大小）。这种情况下，被影响的DOM树越大（可见节点），重绘所需要的时间就会越长，而渲染一帧动画的时间也相应变长。所以需要尽力避免这些属性。</p>\n<p>一些常用的改变时会触发重布局的属性：</p>\n<ol>\n<li><p>盒子模型相关属性会触发重布局：</p>\n<ul>\n<li>width</li>\n<li>height</li>\n<li>padding</li>\n<li>margin</li>\n<li>display</li>\n<li>border-width</li>\n<li>border</li>\n<li>min-height</li>\n</ul>\n</li>\n<li><p>定位属性及浮动也会触发重布局：</p>\n<ul>\n<li>top</li>\n<li>bottom</li>\n<li>left</li>\n<li>right</li>\n<li>position</li>\n<li>float</li>\n<li>clear</li>\n</ul>\n</li>\n<li><p>改变节点内部文字结构也会触发重布局：</p>\n<ul>\n<li>text-align</li>\n<li>overflow-y</li>\n<li>font-weight</li>\n<li>overflow</li>\n<li>font-family</li>\n<li>line-height</li>\n<li>vertival-align</li>\n<li>white-space</li>\n<li>font-size</li>\n</ul>\n</li>\n</ol>\n<p>这么多常用属性都会触发重布局，可以看到，他们的特点就是可能修改整个节点的大小或位置，所以会触发重布局。</p>\n<h4 id=\"触发重绘的属性\">触发重绘的属性<a href=\"post/2018-07-23-前端性能优化-2#触发重绘的属性\"></a></h4><p>修改时只触发重绘的属性有：</p>\n<ul>\n<li>color</li>\n<li>border-style</li>\n<li>border-radius</li>\n<li>visibility</li>\n<li>text-decoration</li>\n<li>background</li>\n<li>background-image</li>\n<li>background-position</li>\n<li>background-repeat</li>\n<li>background-size</li>\n<li>outline-color</li>\n<li>outline</li>\n<li>outline-style</li>\n<li>outline-width</li>\n<li>box-shadow</li>\n</ul>\n<p>这样可以看到，这些属性都不会修改节点的大小和位置，自然不会触发重布局，但是节点内部的渲染效果进行了改变，所以只需要重绘就可以了。</p>\n<h4 id=\"强迫浏览器创建图层\">强迫浏览器创建图层<a href=\"post/2018-07-23-前端性能优化-2#强迫浏览器创建图层\"></a></h4><p>在 Blink 和 WebKit 的浏览器中，一当一个节点被设定了透明度的相关过渡效果或动画时，浏览器会将其作为一个单独的图层，但很多开发者使用 translateZ(0) 或者 translate3d(0,0,0) 去使浏览器创建图层。这种方式可以消除在动画开始之前的图层创建时间，使得动画尽快开始（创建图层和绘制图层还是比较慢的），而且不会随着抗锯齿而导出突变。不过这种方法需要节制，否则会因为创建过多的图层导致崩溃。</p>\n","prev":{"title":"[转]Vuex框架原理与源码分析","link":"post/2018-07-25-Vuex框架原理与源码分析"},"next":{"title":"前端性能优化-1","link":"post/2018-07-23-前端性能优化-1"},"plink":"https://vincentdou.github.io/blog/post/2018-07-23-前端性能优化-2/","toc":[{"title":"动画篇","id":"动画篇","index":"1"}]}