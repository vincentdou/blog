{"title":"JavaScript 模块化七日谈","date":"2018-08-07T16:00:00.000Z","author":"Vincent","link":"post/2018-08-08-JavaScript模块化七日谈","tags":["JavaScript","前端开发","前端模块化"],"updated":"2019-01-02T08:49:00.266Z","content":"<blockquote>\n<p>黄玄这篇 Slides（<a href=\"https://huangxuan.me/js-module-7day\" target=\"_blank\" rel=\"noopener\">JavaScript Modularization Journey</a>）把前端模块化的发展历程梳理的很清晰，这篇文章是对这个 Slides 的总结。</p>\n</blockquote>\n<h3 id=\"第一日-上古时期-MODULE\">第一日 上古时期 (MODULE?)<a href=\"post/2018-08-08-JavaScript模块化七日谈#第一日-上古时期-MODULE\"></a></h3><blockquote>\n<p>从设计模式说起</p>\n</blockquote>\n<p>最早，我们这么写代码：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这种情况下 Global 被污染，很容易命名冲突。</p>\n<p>于是想到了进行\b简单的封装，就是 <strong>Namespace</strong> 模式：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MYAPP = &#123;</span><br><span class=\"line\">    foo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</span><br><span class=\"line\">    bar: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MYAPP.foo();</span><br></pre></td></tr></table></div></figure>\n<p>这种做法减少 Global 上的变量数目。</p>\n<p>但是它本质是对象，我们可以直接访问甚至更改它的内部变量，\b一点都不安全。由此就有了用匿名闭包的方式，即 <strong>IIFE</strong> 模式：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Module = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _private = <span class=\"string\">\"safe now\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(_private)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        foo: foo</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\">Module.foo();</span><br><span class=\"line\">Module._private; <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></div></figure>\n<p>再增强一点，引入依赖：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Module = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _$body = $(<span class=\"string\">\"body\"</span>);     <span class=\"comment\">// we can use jQuery now!</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(_$body);    <span class=\"comment\">// 特权方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Revelation Pattern</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        foo: foo</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)(jQuery)</span><br><span class=\"line\"></span><br><span class=\"line\">Module.foo();</span><br></pre></td></tr></table></div></figure>\n<p>这就是模块模式，也是现代模块实现的基石。</p>\n<h3 id=\"第二日-石器时代-SCRIPT-LOADER\">第二日 石器时代 (SCRIPT LOADER)<a href=\"post/2018-08-08-JavaScript模块化七日谈#第二日-石器时代-SCRIPT-LOADER\"></a></h3><blockquote>\n<p>只有封装性可不够，我们还需要加载</p>\n</blockquote>\n<p>回到 script 标签：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body</span><br><span class=\"line\">    script(src=<span class=\"string\">\"jquery.js\"</span>)</span><br><span class=\"line\">    script(src=<span class=\"string\">\"app.js\"</span>)    <span class=\"comment\">// do some $ things...</span></span><br></pre></td></tr></table></div></figure>\n<p>请求是必要发起的，加载是平行加载，DOM 顺序即执行顺序。</p>\n<p>对于一个前端项目，现实是这样的：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body</span><br><span class=\"line\">    script(src=<span class=\"string\">\"zepto.js\"</span>)</span><br><span class=\"line\">    script(src=<span class=\"string\">\"jhash.js\"</span>)</span><br><span class=\"line\">    script(src=<span class=\"string\">\"fastClick.js\"</span>)</span><br><span class=\"line\">    script(src=<span class=\"string\">\"iScroll.js\"</span>)</span><br><span class=\"line\">    script(src=<span class=\"string\">\"underscore.js\"</span>)</span><br><span class=\"line\">    script(src=<span class=\"string\">\"handlebar.js\"</span>)</span><br><span class=\"line\">    script(src=<span class=\"string\">\"datacenter.js\"</span>)</span><br><span class=\"line\">    script(src=<span class=\"string\">\"deferred.js\"</span>)</span><br><span class=\"line\">    script(src=<span class=\"string\">\"util/wxbridge.js\"</span>)</span><br><span class=\"line\">    script(src=<span class=\"string\">\"util/login.js\"</span>)</span><br><span class=\"line\">    script(src=<span class=\"string\">\"util/base.js\"</span>)</span><br><span class=\"line\">    script(src=<span class=\"string\">\"util/city.js\"</span>)</span><br><span class=\"line\">    script(src=<span class=\"string\">\"util/date.js\"</span>)</span><br><span class=\"line\">    script(src=<span class=\"string\">\"util/cookie.js\"</span>)</span><br><span class=\"line\">    script(src=<span class=\"string\">\"app.js\"</span>)</span><br></pre></td></tr></table></div></figure>\n<p>这就引发了难以维护、依赖模糊、请求过多的问题。</p>\n<h4 id=\"LABjs\"><a href=\"http://labjs.com/\" target=\"_blank\" rel=\"noopener\">LABjs</a><a href=\"post/2018-08-08-JavaScript模块化七日谈#LABjs\"></a></h4><figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">script(src=<span class=\"string\">\"LAB.js\"</span>)</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$LAB.script(<span class=\"string\">\"framework.js\"</span>).wait()</span><br><span class=\"line\">    .script(<span class=\"string\">\"plugin.framework.js\"</span>)</span><br><span class=\"line\">    .script(<span class=\"string\">\"myplugin.framework.js\"</span>).wait()</span><br><span class=\"line\">    .script(<span class=\"string\">\"init.js\"</span>);</span><br></pre></td></tr></table></div></figure>\n<p>.wait()方法表示立即运行刚才加载的Javascript文件</p>\n<p>语法糖：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$LAB</span><br><span class=\"line\">.script( [ <span class=\"string\">\"script1.js\"</span>, <span class=\"string\">\"script2.js\"</span>, <span class=\"string\">\"script3.js\"</span>] )</span><br><span class=\"line\">.wait(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">// wait for all scripts to execute first</span></span><br><span class=\"line\">    script1Func();</span><br><span class=\"line\">    script2Func();</span><br><span class=\"line\">    script3Func();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n<p><em>基于文件的依赖管理</em></p>\n<h3 id=\"第三日-蒸汽朋克-MODULE-LOADER\">第三日 蒸汽朋克 (MODULE LOADER)<a href=\"post/2018-08-08-JavaScript模块化七日谈#第三日-蒸汽朋克-MODULE-LOADER\"></a></h3><blockquote>\n<p>模块化架构的工业革命</p>\n</blockquote>\n<h4 id=\"YUI3-Loader\"><a href=\"https://huangxuan.me/js-module-7day/yuilibrary.com\" target=\"_blank\" rel=\"noopener\">YUI3</a> Loader<a href=\"post/2018-08-08-JavaScript模块化七日谈#YUI3-Loader\"></a></h4><p>回顾昔日王者的风采：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// YUI - 编写模块</span></span><br><span class=\"line\">YUI.add(<span class=\"string\">'dom'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Y</span>) </span>&#123;</span><br><span class=\"line\">  Y.DOM = &#123; ... &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// YUI - 使用模块</span></span><br><span class=\"line\">YUI().use(<span class=\"string\">'dom'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Y</span>) </span>&#123;</span><br><span class=\"line\">  Y.DOM.doSomeThing();</span><br><span class=\"line\">  <span class=\"comment\">// use some methods DOM attach to Y</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n<p>编写常用模块：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hello.js</span></span><br><span class=\"line\">YUI.add(<span class=\"string\">'hello'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Y</span>)</span>&#123;</span><br><span class=\"line\">    Y.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>)</span>&#123;</span><br><span class=\"line\">        Y.DOM.set(el, <span class=\"string\">'innerHTML'</span>, <span class=\"string\">'Hello!'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,<span class=\"string\">'3.0.0'</span>,&#123;</span><br><span class=\"line\">    requires:[<span class=\"string\">'dom'</span>]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\">YUI().use(<span class=\"string\">'hello'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Y</span>)</span>&#123;</span><br><span class=\"line\">    Y.sayHello(<span class=\"string\">\"hey yui loader\"</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n<p><em>基于模块的依赖管理</em></p>\n<p>更深一步：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Sandbox Implementation</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sandbox</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// initialize the required modules</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; modules.length; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        Sandbox.modules[modules[i]](<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>Y 其实是一个强沙箱，所有依赖模块通过 attach 的方式被注入沙盒。</p>\n<blockquote>\n<p>attach：在当前 YUI 实例上执行模块的初始化代码，使得模块在当前实例上可用</p>\n</blockquote>\n<p>YUI Combo 可以解决过多网络请求的问题：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">script(src=<span class=\"string\">\"http://yui.yahooapis.com/3.0.0/build/yui/yui-min.js\"</span>)</span><br><span class=\"line\">script(src=<span class=\"string\">\"http://yui.yahooapis.com/3.0.0/build/dom/dom-min.js\"</span>)</span><br></pre></td></tr></table></div></figure>\n<p>上面的情况可以写成：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">script(src=<span class=\"string\">\"http://yui.yahooapis.com/combo?</span></span><br><span class=\"line\"><span class=\"string\">    3.0.0/build/yui/yui-min.js&amp;</span></span><br><span class=\"line\"><span class=\"string\">    3.0.0/build/dom/dom-min.js\"</span>)</span><br></pre></td></tr></table></div></figure>\n<p>这样就能在一次请求中拿到多个资源</p>\n<p><em>GET 请求，需要服务器支持</em></p>\n<h3 id=\"第四日-号角吹响-COMMONJS\">第四日 号角吹响 (COMMONJS)<a href=\"post/2018-08-08-JavaScript模块化七日谈#第四日-号角吹响-COMMONJS\"></a></h3><blockquote>\n<p>征服世界的第一步是跳出浏览器</p>\n</blockquote>\n<h4 id=\"CommonJS-API-Standard\"><a href=\"http://www.commonjs.org/\" target=\"_blank\" rel=\"noopener\">CommonJS</a> - API Standard<a href=\"post/2018-08-08-JavaScript模块化七日谈#CommonJS-API-Standard\"></a></h4><p>CommonJS 前身叫 ServerJS ，后来希望能更加 COMMON，成为通吃各种环境的模块规范，改名为 CommonJS 。</p>\n<p><strong>Modules/1.x</strong></p>\n<p>模块的定义与引用：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// math.js</span></span><br><span class=\"line\">exports.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">'math'</span>)      <span class=\"comment\">// ./math in node</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(math.add(<span class=\"number\">1</span>, <span class=\"number\">2</span>));    <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></div></figure>\n<p>CommonJS 最初只专注于 Server-side 而非浏览器环境，因此它采用了同步/阻塞式加载的机制：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// timeout.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> EXE_TIME = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">second</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> start = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(start + second*<span class=\"number\">1000</span> &gt; <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>())&#123;&#125;</span><br><span class=\"line\">&#125;)(EXE_TIME)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"2000ms executed\"</span>)</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./timeout'</span>);   <span class=\"comment\">// sync load</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'done!'</span>);</span><br></pre></td></tr></table></div></figure>\n<p>这对服务器环境（硬盘 I/O 速度）不是问题，而对浏览器环境（网速）来说并不合适。</p>\n<h3 id=\"第五日-双塔奇兵-AMD-CMD\">第五日 双塔奇兵 (AMD/CMD)<a href=\"post/2018-08-08-JavaScript模块化七日谈#第五日-双塔奇兵-AMD-CMD\"></a></h3><blockquote>\n<p>浏览器环境模块化方案</p>\n</blockquote>\n<p>在 CommonJS 推广到浏览器的过程中，关于 Modules 的下一版规范，形成了三大流派：</p>\n<ol>\n<li>Modules/1.x 流派。这个观点觉得 1.x 规范已经够用，只要移植到浏览器端就好。要做的是新增 Modules/Transport 规范，即在浏览器上运行前，先通过转换工具将模块转换为符合 Transport 规范的代码。主流代表是服务端的开发人员。</li>\n<li>Modules/Async 流派。这个观点觉得浏览器有自身的特征，不应该直接用 Modules/1.x 规范。这个观点下的典型代表是 AMD 规范及其实现 RequireJS。</li>\n<li>Modules/2.0 流派。这个观点觉得浏览器有自身的特征，不应该直接用 Modules/1.x 规范，但应该尽可能与 Modules/1.x 规范保持一致。这个观点下的典型代表是 BravoJS 和 FlyScript 的作者。这个观点在本文中的典型代表就是 SeaJS 和 CMD 了。</li>\n</ol>\n<h4 id=\"RequireJS-amp-AMD\"><a href=\"http://requirejs.org/\" target=\"_blank\" rel=\"noopener\">RequireJS</a> &amp; AMD<a href=\"post/2018-08-08-JavaScript模块化七日谈#RequireJS-amp-AMD\"></a></h4><p>AMD (Async Module Definition) 是 RequireJS 在推广过程中对模块定义的规范化产出。</p>\n<p>RequireJS 主要解决的还是 CommonJS 同步加载脚本不适合浏览器这个问题：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//CommonJS</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Employee = <span class=\"built_in\">require</span>(<span class=\"string\">\"types/Employee\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Programmer</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">Programmer.prototype = <span class=\"keyword\">new</span> Employee();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果 require call 是异步的，那么肯定 error</span></span><br><span class=\"line\"><span class=\"comment\">//因为在执行这句前 Employee 模块肯定来不及加载进来</span></span><br></pre></td></tr></table></div></figure>\n<p>所以我们需要 Function Wrapping 来获取依赖并且提前通过 script tag 提前加载进来</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//AMD Wrapper</span></span><br><span class=\"line\"></span><br><span class=\"line\">define(</span><br><span class=\"line\">    [types/Employee],    <span class=\"comment\">//依赖</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Employee</span>)</span>&#123;  <span class=\"comment\">//这个回调会在所有依赖都被加载后才执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Programmer</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//do something</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        Programmer.prototype = <span class=\"keyword\">new</span> Employee();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Programmer;  <span class=\"comment\">//return Constructor</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></div></figure>\n<p>当依赖模块非常多时，这种依赖前置的写法会显得有点奇怪，所以 AMD 给了一个语法糖， simplified CommonJS wrapping，借鉴了 CommonJS 的 require 就近风格，也更方便对 CommonJS 模块的兼容：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dependency1 = <span class=\"built_in\">require</span>(<span class=\"string\">'dependency1'</span>),</span><br><span class=\"line\">        dependency2 = <span class=\"built_in\">require</span>(<span class=\"string\">'dependency2'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n<p>AMD 和 CommonJS 的核心争议包括执行时机和书写风格：</p>\n<p><strong>执行时机</strong></p>\n<p>Modules/1.0:</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"./a\"</span>) <span class=\"comment\">// 执行到此时，a.js 才同步下载并执行</span></span><br></pre></td></tr></table></div></figure>\n<p>AMD: （使用 require 的语法糖时）</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([<span class=\"string\">\"require\"</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>))</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在这里，a.js 已经下载并且执行好了</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用 require() 并不是 AMD 的推荐写法</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"./a\"</span>) <span class=\"comment\">// 此处仅仅是取模块 a 的 exports</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n<p>AMD 里提前下载 a.js 是出于对浏览器环境的考虑，只能采取异步下载，这个社区都认可（Sea.js 也是这么做的）</p>\n<p>但是 AMD 的执行是提前执行，而 Modules/1.0 是第一次 require 时才执行。这个差异很多人不能接受，包括持 Modules/2.0 观点的人也不能接受。</p>\n<p><strong>书写风格</strong></p>\n<p>AMD 推荐的风格并不使用require，而是通过参数传入，破坏了依赖就近：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b, c</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 提前申明了并初始化了所有模块</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"literal\">true</span> || b.foo(); <span class=\"comment\">//即便根本没用到模块 b，但 b 还是提前执行了。</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"SeaJS-amp-CMD\"><a href=\"https://seajs.github.io/seajs/docs/\" target=\"_blank\" rel=\"noopener\">SeaJS</a> &amp; CMD<a href=\"post/2018-08-08-JavaScript模块化七日谈#SeaJS-amp-CMD\"></a></h4><p>CMD (Common Module Definition) 是 SeaJS 在推广过程中对模块定义的规范化产出，是 Modules/2.0 流派的支持者，因此 SeaJS 的模块写法尽可能与 Modules/1.x 规范保持一致。</p>\n<p>CMD 主要有 define, factory, require, export 这么几个东西：</p>\n<ul>\n<li>define <code>define(id?, deps?, factory)</code></li>\n<li>factory <code>factory(require, exports, module)</code></li>\n<li>require <code>require(id)</code></li>\n<li>exports <code>Object</code></li>\n</ul>\n<p>CMD 推荐的 Code Style 是使用 CommonJS 风格的 require：</p>\n<p>这个 require 实际上是一个全局函数，用于加载模块，这里实际就是传入而已</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取模块 a 的接口</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 调用模块 a 的方法</span></span><br><span class=\"line\">    a.doSomething();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 对外提供 foo 属性</span></span><br><span class=\"line\">    exports.foo = <span class=\"string\">'bar'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 对外提供 doSomething 方法</span></span><br><span class=\"line\">    exports.doSomething = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n<p>但是你也可以使用 AMD 风格，或者使用 return 来进行模块暴露</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"string\">'hello'</span>, [<span class=\"string\">'jquery'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 模块代码...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 直接通过 return 暴露接口</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        foo: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">        doSomething: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n<p>Sea.js 借鉴了 RequireJS 的不少东西，比如将 FlyScript 中的 module.declare 改名为 define 等。Sea.js 更多地来自 Modules/2.0 的观点，但尽可能去掉了学院派的东西，加入了不少实战派的理念。</p>\n<h4 id=\"AMD-vs-CMD\">AMD vs CMD<a href=\"post/2018-08-08-JavaScript模块化七日谈#AMD-vs-CMD\"></a></h4><p>虽然两者目前都兼容各种风格，但其底层原理并不相同，从其分别推荐的写法就可以看出两者背后原理的不同：</p>\n<p>对于依赖的模块，AMD 是提前执行，CMD 是懒执行；CMD 推崇依赖就近，AMD 推崇依赖前置。（都是先加载）</p>\n<p>看代码：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AMD 默认推荐</span></span><br><span class=\"line\"></span><br><span class=\"line\">define([<span class=\"string\">'./a'</span>, <span class=\"string\">'./b'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;  <span class=\"comment\">// 依赖前置，提前执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">    a.doSomething()</span><br><span class=\"line\">    b.doSomething()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// CMD</span></span><br><span class=\"line\"></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>)</span><br><span class=\"line\">    a.doSomething()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b'</span>) <span class=\"comment\">// 依赖就近，延迟执行</span></span><br><span class=\"line\">    b.doSomething()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"第六日-精灵宝钻-BROWSERIFY-WEBPACK\">第六日 精灵宝钻 (BROWSERIFY/WEBPACK)<a href=\"post/2018-08-08-JavaScript模块化七日谈#第六日-精灵宝钻-BROWSERIFY-WEBPACK\"></a></h3><blockquote>\n<p>大势所趋，去掉这层包裹！</p>\n</blockquote>\n<h4 id=\"Browserify-CommonJS-In-Browser\"><a href=\"http://browserify.org/\" target=\"_blank\" rel=\"noopener\">Browserify</a> - CommonJS In Browser<a href=\"post/2018-08-08-JavaScript模块化七日谈#Browserify-CommonJS-In-Browser\"></a></h4><p>Browserify 是一个 node.js 模块，主要用于改写现有的 CommonJS 模块，使得浏览器端也可以使用这些模块。</p>\n<p>举个例子，假定有一个很简单的CommonJS模块文件foo.js：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foo.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n<p>然后，还有一个main.js文件，用来加载foo模块：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"built_in\">require</span>(<span class=\"string\">\"./foo\"</span>);</span><br><span class=\"line\">foo(<span class=\"string\">\"Hi\"</span>);</span><br></pre></td></tr></table></div></figure>\n<p>使用Browserify，将main.js转化为浏览器可以加载的脚本compiled.js。</p>\n<figure class=\"highlight shell\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">browserify main.js -o compiled.js</span><br></pre></td></tr></table></div></figure>\n<p>转化后的文件不仅包括了main.js，还包括了它所依赖的foo.js。两者打包在一起，保证浏览器加载时的依赖关系。</p>\n<figure class=\"highlight html\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"compiled.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n<p>使用上面的命令，在浏览器中运行 compiled.js，控制台会显示Hi。</p>\n<p>利用 <a href=\"https://www.npmjs.com/package/watchify\" target=\"_blank\" rel=\"noopener\">Watchify</a> 可以做到 auto-recompile：</p>\n<figure class=\"highlight shell\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> npm install -g watchify</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight shell\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> WATCH!</span><br><span class=\"line\"><span class=\"meta\">$</span> watchify app.js -o bundle.js -v</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"Webpack-Module-Bundler\"><a href=\"https://www.webpackjs.com/\" target=\"_blank\" rel=\"noopener\">Webpack</a> - Module Bundler<a href=\"post/2018-08-08-JavaScript模块化七日谈#Webpack-Module-Bundler\"></a></h4><p>webpack 是一个模块打包器，webpack 的主要目标是将 JavaScript 文件打包在一起，打包后的文件用于在浏览器中使用。</p>\n<p>webpack 功能十分强大，除了打包 JS 还能对静态资源、css 文件等进行处理，另外还有插件系统、\b代码分割\b等功能。</p>\n<h3 id=\"第七日-王者归来-ES6-MODULE\">第七日 王者归来 (ES6 MODULE)<a href=\"post/2018-08-08-JavaScript模块化七日谈#第七日-王者归来-ES6-MODULE\"></a></h3><blockquote>\n<p>最后的战役</p>\n</blockquote>\n<p>在 ES6 之后终于有了 Module</p>\n<p>只有一个 default 的情况：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// math.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> math = &#123;</span><br><span class=\"line\">    PI: <span class=\"number\">3.14</span>,</span><br><span class=\"line\">    foo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> math <span class=\"keyword\">from</span> <span class=\"string\">\"./math\"</span>;</span><br><span class=\"line\">math.PI</span><br></pre></td></tr></table></div></figure>\n<p>命名 export：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// export Declaration</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am not bar.'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// export VariableStatement;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> PI = <span class=\"number\">3.14</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> bar = foo;   <span class=\"comment\">// function expression</span></span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// export &#123; ExportsList &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> PI = <span class=\"number\">3.14</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; PI, foo &#125;;</span><br></pre></td></tr></table></div></figure>\n<p>引入命名的 export：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// import &#123; ImportsList &#125; from \"module-name\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; PI &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./math\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; PI, foo &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"module-name\"</span>;</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// import IdentifierName as ImportedBinding</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; foo <span class=\"keyword\">as</span> bar &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./math\"</span>;</span><br><span class=\"line\">bar();  <span class=\"comment\">// use alias bar</span></span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// import NameSpaceImport</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> math <span class=\"keyword\">from</span> <span class=\"string\">\"./math\"</span>;</span><br><span class=\"line\">math.PI</span><br><span class=\"line\">math.foo()</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"babel\"><a href=\"https://babeljs.io/\" target=\"_blank\" rel=\"noopener\">babel</a><a href=\"post/2018-08-08-JavaScript模块化七日谈#babel\"></a></h4><p>Babel 是一个 JavaScript 编译器，它让我们现在就可以使用下一代 JavaScript 语法。</p>\n<blockquote>\n<p>参考：<br><a href=\"https://www.cyj.me/programming/2018/05/22/about-module-i/\" target=\"_blank\" rel=\"noopener\">前端模块的历史沿革</a><br><a href=\"https://www.cyj.me/programming/2018/05/23/about-module-ii/\" target=\"_blank\" rel=\"noopener\">前端模块的现状</a></p>\n</blockquote>\n","prev":{"title":"[转]写一个符合 Promises/A+ 规范并可配合 ES7 async/await 使用的 Promise","link":"post/2018-11-20-Promise实现详解"},"next":{"title":"JS 中的 NaN","link":"post/2018-08-07-NaN"},"plink":"https://vincentdou.github.io/blog/post/2018-08-08-JavaScript模块化七日谈/"}