{"title":"[转]Vuex 2.0 源码分析","date":"2018-07-25T16:00:00.000Z","author":"Vincent","link":"post/2018-07-26-Vuex源码分析","tags":["vue","前端开发"],"updated":"2019-01-02T08:49:00.262Z","content":"<blockquote>\n<p>原文：<a href=\"https://github.com/DDFE/DDFE-blog/issues/8\" target=\"_blank\" rel=\"noopener\">Vuex 2.0 源码分析</a></p>\n</blockquote>\n<h2 id=\"目录结构\">目录结构<a href=\"post/2018-07-26-Vuex源码分析#目录结构\"></a></h2><p>Vuex 的源码托管在 github，我们首先通过 git 把代码 clone 到本地，选一款适合自己的 IDE 打开源码，展开 src 目录，如下图所示：</p>\n<p><img src=\"https://camo.githubusercontent.com/4c0c82eb95a6d128f80355522e266fe5220ca863/687474703a2f2f7374617469632e67616c696c656f2e7869616f6a756b656a692e636f6d2f7374617469632f746d732f736869656c642f767565785f7372632e706e67\" alt=\"\" class=\"article-img\"></p>\n<p>src 目录下的文件并不多，包含几个 js 文件和 plugins 目录， plugins 目录里面包含 2 个 Vuex 的内置插件，整个源码加起来不过 500-600 行，可谓非常轻巧的一个库。</p>\n<p>麻雀虽小，五脏俱全，我们先直观的感受一下源码的结构，接下来看一下其中的实现细节。</p>\n<h2 id=\"源码分析\">源码分析<a href=\"post/2018-07-26-Vuex源码分析#源码分析\"></a></h2><p>本文的源码分析过程不会是自上而下的给代码加注释，我更倾向于是从 Vuex 提供的 API 和我们的使用方法等维度去分析。Vuex 的源码是基于 es6 的语法编写的，对于不了解 es6 的同学，建议还是先学习一下 es6。</p>\n<h3 id=\"从入口开始\">从入口开始<a href=\"post/2018-07-26-Vuex源码分析#从入口开始\"></a></h3><p>看源码一般是从入口开始，Vuex 源码的入口是 src/index.js，先来打开这个文件。</p>\n<p>我们首先看这个库的 export ，在 index.js 代码最后。</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  Store,</span><br><span class=\"line\">  install,</span><br><span class=\"line\">  mapState,</span><br><span class=\"line\">  mapMutations,</span><br><span class=\"line\">  mapGetters,</span><br><span class=\"line\">  mapActions</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这里可以一目了然地看到 Vuex 对外暴露的 API。其中, Store 是 Vuex 提供的状态存储类，通常我们使用 Vuex 就是通过创建 Store 的实例，稍后我们会详细介绍。接着是 install 方法，这个方法通常是我们编写第三方 Vue 插件的“套路”，先来看一下“套路”代码：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">install</span> (<span class=\"params\">_Vue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Vue) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(</span><br><span class=\"line\">      <span class=\"string\">'[vuex] already installed. Vue.use(Vuex) should be called only once.'</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Vue = _Vue</span><br><span class=\"line\">  applyMixin(Vue)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// auto install in dist mode</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span> &amp;&amp; <span class=\"built_in\">window</span>.Vue) &#123;</span><br><span class=\"line\">  install(<span class=\"built_in\">window</span>.Vue)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>我们实现了一个 install 方法，这个方法当我们全局引用 Vue ，也就是 window 上有 Vue 对象的时候，会手动调用 install 方法，并传入 Vue 的引用；当 Vue 通过 npm 安装到项目中的时候，我们在代码中引入第三方 Vue 插件通常会编写如下代码：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\">...</span><br><span class=\"line\">Vue.use(Vuex)</span><br></pre></td></tr></table></div></figure>\n<p>当我们执行 Vue.use(Vuex) 这句代码的时候，实际上就是调用了 install 的方法并传入 Vue 的引用。install 方法顾名思义，现在让我们来看看它的实现。它接受了一个参数 _Vue，函数体首先判断 Vue ，这个变量的定义在 index.js 文件的开头部分：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> Vue <span class=\"comment\">// bind on install</span></span><br></pre></td></tr></table></div></figure>\n<p>对 Vue 的判断主要是保证 install 方法只执行一次，这里把 install 方法的参数 _Vue 对象赋值给 Vue 变量，这样我们就可以在 index.js 文件的其它地方使用 Vue 这个变量了。install 方法的最后调用了 applyMixin 方法，我们顺便来看一下这个方法的实现，在 src/mixin.js 文件里定义：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> version = <span class=\"built_in\">Number</span>(Vue.version.split(<span class=\"string\">'.'</span>)[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (version &gt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> usesInit = Vue.config._lifecycleHooks.indexOf(<span class=\"string\">'init'</span>) &gt; <span class=\"number\">-1</span></span><br><span class=\"line\">    Vue.mixin(usesInit ? &#123; <span class=\"attr\">init</span>: vuexInit &#125; : &#123; <span class=\"attr\">beforeCreate</span>: vuexInit &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// override init and inject vuex init procedure</span></span><br><span class=\"line\">    <span class=\"comment\">// for 1.x backwards compatibility.</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> _init = Vue.prototype._init</span><br><span class=\"line\">    Vue.prototype._init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">      options.init = options.init</span><br><span class=\"line\">        ? [vuexInit].concat(options.init)</span><br><span class=\"line\">        : vuexInit</span><br><span class=\"line\">      _init.call(<span class=\"keyword\">this</span>, options)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Vuex init hook, injected into each instances init hooks list.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">vuexInit</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> options = <span class=\"keyword\">this</span>.$options</span><br><span class=\"line\">    <span class=\"comment\">// store injection</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.store) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$store = options.store</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (options.parent &amp;&amp; options.parent.$store) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$store = options.parent.$store</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这段代码的作用就是在 Vue 的生命周期中的初始化（1.0 版本是 init，2.0 版本是 beforeCreated）钩子前插入一段 Vuex 初始化代码。这里做的事情很简单——给 Vue 的实例注入一个 <code>$store</code> 的属性，这也就是为什么我们在 Vue 的组件中可以通过 <code>this.$store.xxx</code> 访问到 Vuex 的各种数据和状态。</p>\n<h3 id=\"认识-Store-构造函数\">认识 Store 构造函数<a href=\"post/2018-07-26-Vuex源码分析#认识-Store-构造函数\"></a></h3><p>我们在使用 Vuex 的时候，通常会实例化 Store 类，然后传入一个对象，包括我们定义好的 actions、getters、mutations、state等，甚至当我们有多个子模块的时候，我们可以添加一个 modules 对象。那么实例化的时候，到底做了哪些事情呢？带着这个疑问，让我们回到 index.js 文件，重点看一下 Store 类的定义。Store 类定义的代码略长，我不会一下就贴上所有代码，我们来拆解分析它，首先看一下构造函数的实现：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Store</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (options = &#123;&#125;) &#123;</span><br><span class=\"line\">    assert(Vue, <span class=\"string\">`must call Vue.use(Vuex) before creating a store instance.`</span>)</span><br><span class=\"line\">    assert(<span class=\"keyword\">typeof</span> <span class=\"built_in\">Promise</span> !== <span class=\"string\">'undefined'</span>, <span class=\"string\">`vuex requires a Promise polyfill in this browser.`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">      state = &#123;&#125;,</span><br><span class=\"line\">      plugins = [],</span><br><span class=\"line\">      strict = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125; = options</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// store internal state</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._options = options</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._committing = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._actions = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._mutations = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._wrappedGetters = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._runtimeModules = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._subscribers = []</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._watcherVM = <span class=\"keyword\">new</span> Vue()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// bind commit and dispatch to self</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> store = <span class=\"keyword\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; dispatch, commit &#125; = <span class=\"keyword\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dispatch = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">boundDispatch</span> (<span class=\"params\">type, payload</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> dispatch.call(store, type, payload)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.commit = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">boundCommit</span> (<span class=\"params\">type, payload, options</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> commit.call(store, type, payload, options)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// strict mode</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.strict = strict</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// init root module.</span></span><br><span class=\"line\">    <span class=\"comment\">// this also recursively registers all sub-modules</span></span><br><span class=\"line\">    <span class=\"comment\">// and collects all module getters inside this._wrappedGetters</span></span><br><span class=\"line\">    installModule(<span class=\"keyword\">this</span>, state, [], options)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// initialize the store vm, which is responsible for the reactivity</span></span><br><span class=\"line\">    <span class=\"comment\">// (also registers _wrappedGetters as computed properties)</span></span><br><span class=\"line\">    resetStoreVM(<span class=\"keyword\">this</span>, state)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// apply plugins</span></span><br><span class=\"line\">    plugins.concat(devtoolPlugin).forEach(<span class=\"function\"><span class=\"params\">plugin</span> =&gt;</span> plugin(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>构造函数的一开始就用了“断言函数”，来判断是否满足一些条件。</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assert(Vue, <span class=\"string\">`must call Vue.use(Vuex) before creating a store instance.`</span>)</span><br></pre></td></tr></table></div></figure>\n<p>这行代码的目的是确保 Vue 的存在，也就是在我们实例化 Store 之前，必须要保证之前的 install 方法已经执行了。</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assert(<span class=\"keyword\">typeof</span> <span class=\"built_in\">Promise</span> !== <span class=\"string\">'undefined'</span>, <span class=\"string\">`vuex requires a Promise polyfill in this browser.`</span>)</span><br></pre></td></tr></table></div></figure>\n<p>这行代码的目的是为了确保 Promsie 可以使用的，因为 Vuex 的源码是依赖 Promise 的。Promise 是 es6 提供新的 API，由于现在的浏览器并不是都支持 es6 语法的，所以通常我们会用 babel 编译我们的代码，如果想使用 Promise 这个 特性，我们需要在 package.json 中添加对 babel-polyfill 的依赖并在代码的入口加上 import ‘babel-polyfill’ 这段代码。</p>\n<p>再来看看 assert 这个函数，它并不是浏览器原生支持的，它的实现在 src/util.js 里，代码如下：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">assert</span> (<span class=\"params\">condition, msg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!condition) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`[vuex] <span class=\"subst\">$&#123;msg&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>非常简单，对 condition 判断，如果不不为真，则抛出异常。这个函数虽然简单，但这种编程方式值得我们学习。</p>\n<p>再来看构造函数接下来的代码：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  state = &#123;&#125;,</span><br><span class=\"line\">  plugins = [],</span><br><span class=\"line\">  strict = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125; = options</span><br></pre></td></tr></table></div></figure>\n<p>这里就是利用 es6 的解构赋值拿到 options 里的 state，plugins 和 strict。state 表示 rootState，plugins 表示应用的插件、strict 表示是否开启严格模式。</p>\n<p>接着往下看：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store internal state</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>._options = options</span><br><span class=\"line\"><span class=\"keyword\">this</span>._committing = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>._actions = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\"><span class=\"keyword\">this</span>._mutations = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\"><span class=\"keyword\">this</span>._wrappedGetters = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\"><span class=\"keyword\">this</span>._runtimeModules = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\"><span class=\"keyword\">this</span>._subscribers = []</span><br><span class=\"line\"><span class=\"keyword\">this</span>._watcherVM = <span class=\"keyword\">new</span> Vue()</span><br></pre></td></tr></table></div></figure>\n<p>这里主要是创建一些内部的属性：<br>this._options 存储参数 options。<br>this._committing 标志一个提交状态，作用是保证对 Vuex 中 state 的修改只能在 mutation 的回调函数中，而不能在外部随意修改 state。<br>this._actions 用来存储用户定义的所有的 actions。<br>this._mutations 用来存储用户定义所有的 mutatins。<br>this._wrappedGetters 用来存储用户定义的所有 getters 。<br>this._runtimeModules 用来存储所有的运行时的 modules。<br>this._subscribers 用来存储所有对 mutation 变化的订阅者。<br>this._watcherVM 是一个 Vue 对象的实例，主要是利用 Vue 实例方法 $watch 来观测变化的。</p>\n<p>继续往下看：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bind commit and dispatch to self</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">this</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; dispatch, commit &#125; = <span class=\"keyword\">this</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.dispatch = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">boundDispatch</span> (<span class=\"params\">type, payload</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dispatch.call(store, type, payload)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.commit = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">boundCommit</span> (<span class=\"params\">type, payload, options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> commit.call(store, type, payload, options)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// strict mode</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.strict = strict</span><br></pre></td></tr></table></div></figure>\n<p>这里的代码也不难理解，把 Store 类的 dispatch 和 commit 的方法的 this 指针指向当前 store 的实例上，dispatch 和 commit 的实现我们稍后会分析。this.strict 表示是否开启严格模式，在严格模式下会观测所有的 state 的变化，建议在开发环境时开启严格模式，线上环境要关闭严格模式，否则会有一定的性能开销。</p>\n<h3 id=\"Vuex-的初始化核心\">Vuex 的初始化核心<a href=\"post/2018-07-26-Vuex源码分析#Vuex-的初始化核心\"></a></h3><h4 id=\"installModule\">installModule<a href=\"post/2018-07-26-Vuex源码分析#installModule\"></a></h4><p>我们接着往下看：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// init root module.</span></span><br><span class=\"line\"><span class=\"comment\">// this also recursively registers all sub-modules</span></span><br><span class=\"line\"><span class=\"comment\">// and collects all module getters inside this._wrappedGetters</span></span><br><span class=\"line\">installModule(<span class=\"keyword\">this</span>, state, [], options)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// initialize the store vm, which is responsible for the reactivity</span></span><br><span class=\"line\"><span class=\"comment\">// (also registers _wrappedGetters as computed properties)</span></span><br><span class=\"line\">resetStoreVM(<span class=\"keyword\">this</span>, state)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// apply plugins</span></span><br><span class=\"line\">plugins.concat(devtoolPlugin).forEach(<span class=\"function\"><span class=\"params\">plugin</span> =&gt;</span> plugin(<span class=\"keyword\">this</span>))</span><br></pre></td></tr></table></div></figure>\n<p>这段代码是 Vuex 的初始化的核心，其中，installModule 方法是把我们通过 options 传入的各种属性模块注册和安装；resetStoreVM 方法是初始化 store._vm，观测 state 和 getters 的变化；最后是应用传入的插件。</p>\n<p>下面，我们先来看一下 installModule 的实现：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">installModule</span> (<span class=\"params\">store, rootState, path, module, hot</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isRoot = !path.length</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    state,</span><br><span class=\"line\">    actions,</span><br><span class=\"line\">    mutations,</span><br><span class=\"line\">    getters,</span><br><span class=\"line\">    modules</span><br><span class=\"line\">  &#125; = <span class=\"built_in\">module</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// set state</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isRoot &amp;&amp; !hot) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentState = getNestedState(rootState, path.slice(<span class=\"number\">0</span>, <span class=\"number\">-1</span>))</span><br><span class=\"line\">    <span class=\"keyword\">const</span> moduleName = path[path.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">    store._withCommit(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      Vue.set(parentState, moduleName, state || &#123;&#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mutations) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(mutations).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">      registerMutation(store, key, mutations[key], path)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (actions) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(actions).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">      registerAction(store, key, actions[key], path)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (getters) &#123;</span><br><span class=\"line\">    wrapGetters(store, getters, path)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (modules) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(modules).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">      installModule(store, rootState, path.concat(key), modules[key], hot)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>installModule 函数可接收5个参数，store、rootState、path、module、hot，store 表示当前 Store 实例，rootState 表示根 state，path 表示当前嵌套模块的路径数组，module 表示当前安装的模块，hot 当动态改变 modules 或者热更新的时候为 true。</p>\n<p>先来看这部分代码：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isRoot = !path.length</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  state,</span><br><span class=\"line\">  actions,</span><br><span class=\"line\">  mutations,</span><br><span class=\"line\">  getters,</span><br><span class=\"line\">  modules</span><br><span class=\"line\">&#125; = <span class=\"built_in\">module</span></span><br></pre></td></tr></table></div></figure>\n<p>代码首先通过 path 数组的长度判断是否为根。我们在构造函数调用的时候是 installModule(this, state, [], options)，所以这里 isRoot 为 true。module 为传入的 options，我们拿到了 module 下的 state、actions、mutations、getters 以及嵌套的 modules。</p>\n<p>接着看下面的代码：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// set state</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!isRoot &amp;&amp; !hot) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> parentState = getNestedState(rootState, path.slice(<span class=\"number\">0</span>, <span class=\"number\">-1</span>))</span><br><span class=\"line\">  <span class=\"keyword\">const</span> moduleName = path[path.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">  store._withCommit(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    Vue.set(parentState, moduleName, state || &#123;&#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这里判断当不为根且非热更新的情况，然后设置级联状态，这里乍一看不好理解，我们先放一放，稍后来回顾。</p>\n<p>再往下看代码：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (mutations) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(mutations).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">    registerMutation(store, key, mutations[key], path)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (actions) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(actions).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">    registerAction(store, key, actions[key], path)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (getters) &#123;</span><br><span class=\"line\">  wrapGetters(store, getters, path)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这里分别是对 mutations、actions、getters 进行注册，如果我们实例化 Store 的时候通过 options 传入这些对象，那么会分别进行注册，我稍后再去介绍注册的具体实现。那么到这，如果 Vuex 没有 module ，这个 installModule 方法可以说已经做完了。但是 Vuex 巧妙了设计了 module 这个概念，因为 Vuex 本身是单一状态树，应用的所有状态都包含在一个大对象内，随着我们应用规模的不断增长，这个 Store 变得非常臃肿。为了解决这个问题，Vuex 允许我们把 store 分 module（模块）。每一个模块包含各自的 state、mutations、actions 和 getters，甚至是嵌套模块。所以，接下来还有一行代码：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (modules) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(modules).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">    installModule(store, rootState, path.concat(key), modules[key], hot)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这里通过遍历 modules，递归调用 installModule 去安装子模块。这里传入了 store、rootState、path.concat(key)、和 modules[key]，和刚才不同的是，path 不为空，module 对应为子模块，那么我们回到刚才那段代码：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// set state</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!isRoot &amp;&amp; !hot) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> parentState = getNestedState(rootState, path.slice(<span class=\"number\">0</span>, <span class=\"number\">-1</span>))</span><br><span class=\"line\">  <span class=\"keyword\">const</span> moduleName = path[path.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">  store._withCommit(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    Vue.set(parentState, moduleName, state || &#123;&#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>当递归初始化子模块的时候，isRoot 为 false，注意这里有个方法getNestedState(rootState, path)，来看一下 getNestedState 函数的定义：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNestedState</span> (<span class=\"params\">state, path</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> path.length</span><br><span class=\"line\">    ? path.reduce(<span class=\"function\">(<span class=\"params\">state, key</span>) =&gt;</span> state[key], state)</span><br><span class=\"line\">    : state</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这个方法很简单，就是根据 path 查找 state 上的嵌套 state。在这里就是传入 rootState 和 path，计算出当前模块的父模块的 state，由于模块的 path 是根据模块的名称 concat 连接的，所以 path 的最后一个元素就是当前模块的模块名，最后调用</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store._withCommit(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  Vue.set(parentState, moduleName, state || &#123;&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n<p>把当前模块的 state 添加到 parentState 中。<br>这里注意一下我们用了 store._withCommit 方法，来看一下这个方法的定义：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_withCommit (fn) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> committing = <span class=\"keyword\">this</span>._committing</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._committing = <span class=\"literal\">true</span></span><br><span class=\"line\">  fn()</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._committing = committing</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>由于我们是在修改 state，Vuex 中所有对 state 的修改都会用 _withCommit函数包装，保证在同步修改 state 的过程中 this._committing 的值始终为true。这样当我们观测 state 的变化时，如果 this._committing 的值不为 true，则能检查到这个状态修改是有问题的。</p>\n<p>看到这里，有些同学可能会有点困惑，举个例子来直观感受一下，以 Vuex 源码中的 example/shopping-cart 为例，打开 store/index.js，有这么一段代码：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  actions,</span><br><span class=\"line\">  getters,</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    cart,</span><br><span class=\"line\">    products</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  strict: debug,</span><br><span class=\"line\">  plugins: debug ? [createLogger()] : []</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n<p>这里有两个子 module，cart 和 products，我们打开 store/modules/cart.js，看一下 cart 模块中的 state 定义，代码如下：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">  added: [],</span><br><span class=\"line\">  checkoutStatus: <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>我们运行这个项目，打开浏览器，利用 Vue 的调试工具来看一下 Vuex 中的状态，如下图所示：</p>\n<p><img src=\"https://camo.githubusercontent.com/2bd2ed9ea9f74792db15c5980666275330ab64a2/687474703a2f2f7374617469632e67616c696c656f2e7869616f6a756b656a692e636f6d2f7374617469632f746d732f736869656c642f767565782d746573742e706e67\" alt=\"\" class=\"article-img\"></p>\n<p>可以看到，在 rootState 下，分别有 cart 和 products 2个属性，key 根据模块名称而来，value 就是在每个模块文件中定义的 state，这就把模块 state 挂载到 rootState 上了。</p>\n<p>我们了解完嵌套模块 state 是怎么一回事后，我们回过头来看一下 installModule 过程中的其它 3 个重要方法：registerMutation、registerAction 和 wrapGetters。顾名思义，这 3 个方法分别处理 mutations、actions 和 getters。我们先来看一下 registerMutation 的定义：</p>\n<h4 id=\"registerMutation\">registerMutation<a href=\"post/2018-07-26-Vuex源码分析#registerMutation\"></a></h4><figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">registerMutation</span> (<span class=\"params\">store, type, handler, path = []</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> entry = store._mutations[type] || (store._mutations[type] = [])</span><br><span class=\"line\">  entry.push(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrappedMutationHandler</span> (<span class=\"params\">payload</span>) </span>&#123;</span><br><span class=\"line\">    handler(getNestedState(store.state, path), payload)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>registerMutation 是对 store 的 mutation 的初始化，它接受 4 个参数，store为当前 Store 实例，type为 mutation 的 key，handler 为 mutation 执行的回调函数，path 为当前模块的路径。mutation 的作用就是同步修改当前模块的 state ，函数首先通过 type 拿到对应的 mutation 对象数组， 然后把一个 mutation 的包装函数 push 到这个数组中，这个函数接收一个参数 payload，这个就是我们在定义 mutation 的时候接收的额外参数。这个函数执行的时候会调用 mutation 的回调函数，并通过 getNestedState(store.state, path) 方法得到当前模块的 state，和 playload 一起作为回调函数的参数。举个例子：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">mutations: &#123;</span><br><span class=\"line\">  increment (state, n) &#123;</span><br><span class=\"line\">    state.count += n</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这里我们定义了一个 mutation，通过刚才的 registerMutation 方法，我们注册了这个 mutation，这里的 state 对应的就是当前模块的 state，n 就是额外参数 payload，接下来我们会从源码分析的角度来介绍这个 mutation 的回调是何时被调用的，参数是如何传递的。</p>\n<p>我们有必要知道 mutation 的回调函数的调用时机，在 Vuex 中，mutation 的调用是通过 store 实例的 API 接口 commit 来调用的，来看一下 commit 函数的定义：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit (type, payload, options) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// check object-style commit</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isObject(type) &amp;&amp; type.type) &#123;</span><br><span class=\"line\">    options = payload</span><br><span class=\"line\">    payload = type</span><br><span class=\"line\">    type = type.type</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> mutation = &#123; type, payload &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> entry = <span class=\"keyword\">this</span>._mutations[type]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!entry) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">`[vuex] unknown mutation type: <span class=\"subst\">$&#123;type&#125;</span>`</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._withCommit(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    entry.forEach(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">commitIterator</span> (<span class=\"params\">handler</span>) </span>&#123;</span><br><span class=\"line\">      handler(payload)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!options || !options.silent) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._subscribers.forEach(<span class=\"function\"><span class=\"params\">sub</span> =&gt;</span> sub(mutation, <span class=\"keyword\">this</span>.state))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>commit 支持 3 个参数，type 表示 mutation 的类型，payload 表示额外的参数，options 表示一些配置，比如 silent 等，稍后会用到。commit 函数首先对 type 的类型做了判断，处理了 type 为 object 的情况，接着根据 type 去查找对应的 mutation，如果找不到，则输出一条错误信息，否则遍历这个 type 对应的 mutation 对象数组，执行 handler(payload) 方法，这个方法就是之前定义的 wrappedMutationHandler(handler)，执行它就相当于执行了 registerMutation 注册的回调函数，并把当前模块的 state 和 额外参数 payload 作为参数传入。注意这里我们依然使用了 this._withCommit 的方法提交 mutation。commit 函数的最后，判断如果不是静默模式，则遍历 this._subscribers，调用回调函数，并把 mutation 和当前的根 state 作为参数传入。那么这个 this._subscribers 是什么呢？原来 Vuex 的 Store 实例提供了 subscribe API 接口，它的作用是订阅（注册监听） store 的 mutation。先来看一下它的实现：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subscribe (fn) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> subs = <span class=\"keyword\">this</span>._subscribers</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (subs.indexOf(fn) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    subs.push(fn)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> i = subs.indexOf(fn)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      subs.splice(i, <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>subscribe 方法很简单，他接受的参数是一个回调函数，会把这个回调函数保存到 this._subscribers 上，并返回一个函数，当我们调用这个返回的函数，就可以解除当前函数对 store 的 mutation 的监听。其实，Vuex 的内置 logger 插件就是基于 subscribe 接口实现对 store 的 muation的监听，稍后我们会详细介绍这个插件。</p>\n<h4 id=\"registerAction\">registerAction<a href=\"post/2018-07-26-Vuex源码分析#registerAction\"></a></h4><p>在了解完 registerMutation，我们再来看一下 registerAction 的定义：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">registerAction</span> (<span class=\"params\">store, type, handler, path = []</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> entry = store._actions[type] || (store._actions[type] = [])</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; dispatch, commit &#125; = store</span><br><span class=\"line\">  entry.push(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrappedActionHandler</span> (<span class=\"params\">payload, cb</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = handler(&#123;</span><br><span class=\"line\">      dispatch,</span><br><span class=\"line\">      commit,</span><br><span class=\"line\">      getters: store.getters,</span><br><span class=\"line\">      state: getNestedState(store.state, path),</span><br><span class=\"line\">      rootState: store.state</span><br><span class=\"line\">    &#125;, payload, cb)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isPromise(res)) &#123;</span><br><span class=\"line\">      res = <span class=\"built_in\">Promise</span>.resolve(res)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (store._devtoolHook) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res.catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        store._devtoolHook.emit(<span class=\"string\">'vuex:error'</span>, err)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>registerAction 是对 store 的 action 的初始化，它和 registerMutation 的参数一致，和 mutation 不同一点，mutation 是同步修改当前模块的 state，而 action 是可以异步去修改 state，这里不要误会，在 action 的回调中并不会直接修改 state ，仍然是通过提交一个 mutation 去修改 state（在 Vuex 中，mutation 是修改 state 的唯一途径）。那我们就来看看 action 是如何做到这一点的。</p>\n<p>函数首先也是通过 type 拿到对应 action 的对象数组，然后把一个 action 的包装函数 push 到这个数组中，这个函数接收 2 个参数，payload 表示额外参数 ，cb 表示回调函数（实际上我们并没有使用它）。这个函数执行的时候会调用 action 的回调函数，传入一个 context 对象，这个对象包括了 store 的 commit 和 dispatch 方法、getter、当前模块的 state 和 rootState 等等。接着对这个函数的返回值做判断，如果不是一个 Promise 对象，则调用 Promise.resolve（res） 给res 包装成了一个 Promise 对象。这里也就解释了为何 Vuex 的源码依赖 Promise，这里对 Promise 的判断也和简单，参考代码 src/util.js，对 isPromise 的判断如下：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPromise</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> val &amp;&amp; <span class=\"keyword\">typeof</span> val.then === <span class=\"string\">'function'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>其实就是简单的检查对象的 then 方法，如果包含说明就是一个 Promise 对象。</p>\n<p>接着判断 store._devtoolHook，这个只有当用到 Vuex devtools 开启的时候，我们才能捕获 promise 的过程中的 。 action 的包装函数最后返回 res ，它就是一个地地道道的 Promise 对象。来看个例子：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  checkout (&#123; commit, state &#125;, payload) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 把当前购物车的商品备份起来</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> savedCartItems = [...state.cart.added]</span><br><span class=\"line\">    <span class=\"comment\">// 发送结帐请求，并愉快地清空购物车</span></span><br><span class=\"line\">    commit(types.CHECKOUT_REQUEST)</span><br><span class=\"line\">    <span class=\"comment\">// 购物 API 接收一个成功回调和一个失败回调</span></span><br><span class=\"line\">    shop.buyProducts(</span><br><span class=\"line\">      products,</span><br><span class=\"line\">      <span class=\"comment\">// 成功操作</span></span><br><span class=\"line\">      () =&gt; commit(types.CHECKOUT_SUCCESS),</span><br><span class=\"line\">      <span class=\"comment\">// 失败操作</span></span><br><span class=\"line\">      () =&gt; commit(types.CHECKOUT_FAILURE, savedCartItems)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这里我们定义了一个 action，通过刚才的 registerAction 方法，我们注册了这个 action，这里的 commit 就是 store 的 API 接口，可以通过它在 action 里提交一个 mutation。state 对应的就是当前模块的 state，我们在这个 action 里即可以同步提交 mutation，也可以异步提交。接下来我们会从源码分析的角度来介绍这个 action 的回调是何时被调用的，参数是如何传递的。</p>\n<p>我们有必要知道 action 的回调函数的调用时机，在 Vuex 中，action 的调用是通过 store 实例的 API 接口 dispatch 来调用的，来看一下 dispatch 函数的定义：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch (type, payload) &#123;</span><br><span class=\"line\"><span class=\"comment\">// check object-style dispatch</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isObject(type) &amp;&amp; type.type) &#123;</span><br><span class=\"line\">    payload = type</span><br><span class=\"line\">    type = type.type</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> entry = <span class=\"keyword\">this</span>._actions[type]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!entry) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">`[vuex] unknown action type: <span class=\"subst\">$&#123;type&#125;</span>`</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> entry.length &gt; <span class=\"number\">1</span></span><br><span class=\"line\">    ? <span class=\"built_in\">Promise</span>.all(entry.map(<span class=\"function\"><span class=\"params\">handler</span> =&gt;</span> handler(payload)))</span><br><span class=\"line\">    : entry[<span class=\"number\">0</span>](payload)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>dispatch 支持2个参数，type 表示 action 的类型，payload 表示额外的参数。前面几行代码和 commit 接口非常类似，都是找到对应 type 下的 action 对象数组，唯一和 commit 不同的地方是最后部分，它对 action 的对象数组长度做判断，如果长度为 1 则直接调用<code>entry[0](payload)</code>， 这个方法就是之前定义的 wrappedActionHandler(payload, cb)，执行它就相当于执行了 registerAction 注册的回调函数，并把当前模块的 context 和 额外参数 payload 作为参数传入。所以我们在 action 的回调函数里，可以拿到当前模块的上下文包括 store 的 commit 和 dispatch 方法、getter、当前模块的 state 和 rootState，可见 action 是非常灵活的。</p>\n<h4 id=\"wrapGetters\">wrapGetters<a href=\"post/2018-07-26-Vuex源码分析#wrapGetters\"></a></h4><p>了解完 registerAction 后，我们来看看 wrapGetters的定义：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrapGetters</span> (<span class=\"params\">store, moduleGetters, modulePath</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(moduleGetters).forEach(<span class=\"function\"><span class=\"params\">getterKey</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> rawGetter = moduleGetters[getterKey]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (store._wrappedGetters[getterKey]) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">`[vuex] duplicate getter key: <span class=\"subst\">$&#123;getterKey&#125;</span>`</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    store._wrappedGetters[getterKey] = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrappedGetter</span> (<span class=\"params\">store</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> rawGetter(</span><br><span class=\"line\">        getNestedState(store.state, modulePath), <span class=\"comment\">// local state</span></span><br><span class=\"line\">        store.getters, <span class=\"comment\">// getters</span></span><br><span class=\"line\">        store.state <span class=\"comment\">// root state</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>wrapGetters 是对 store 的 getters 初始化，它接受 3个 参数， store 表示当前 Store 实例，moduleGetters 表示当前模块下的所有 getters, modulePath 对应模块的路径。细心的同学会发现，和刚才的 registerMutation 以及 registerAction 不同，这里对 getters 的循环遍历是放在了函数体内，并且 getters 和它们的一个区别是不允许 getter 的 key 有重复。</p>\n<p>这个函数做的事情就是遍历 moduleGetters，把每一个 getter 包装成一个方法，添加到 store._wrappedGetters 对象中，注意 getter 的 key 是不允许重复的。在这个包装的方法里，会执行 getter 的回调函数，并把当前模块的 state，store 的 getters 和 store 的 rootState 作为它参数。来看一个例子：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> cartProducts = <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state.cart.added.map(<span class=\"function\">(<span class=\"params\">&#123; id, quantity &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> product = state.products.all.find(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> p.id === id)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      title: product.title,</span><br><span class=\"line\">      price: product.price,</span><br><span class=\"line\">      quantity</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这里我们定义了一个 getter，通过刚才的 wrapGetters 方法，我们把这个 getter 添加到 store._wrappedGetters 对象里，这和回调函数的参数 state 对应的就是当前模块的 state，接下来我们从源码的角度分析这个函数是如何被调用，参数是如何传递的。</p>\n<p>我们有必要知道 getter 的回调函数的调用时机，在 Vuex 中，我们知道当我们在组件中通过 <code>this.$store.getters.xxxgetters</code> 可以访问到对应的 getter 的回调函数，那么我们需要把对应 getter 的包装函数的执行结果绑定到 <code>this.$store</code> 上。这部分的逻辑就在 resetStoreVM 函数里。我们在 Store 的构造函数中，在执行完 installModule 方法后，就会执行 resetStoreVM 方法。来看一下它的定义：</p>\n<h4 id=\"resetStoreVM\">resetStoreVM<a href=\"post/2018-07-26-Vuex源码分析#resetStoreVM\"></a></h4><figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resetStoreVM</span> (<span class=\"params\">store, state</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> oldVm = store._vm</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// bind store public getters</span></span><br><span class=\"line\">  store.getters = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> wrappedGetters = store._wrappedGetters</span><br><span class=\"line\">  <span class=\"keyword\">const</span> computed = &#123;&#125;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(wrappedGetters).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fn = wrappedGetters[key]</span><br><span class=\"line\">    <span class=\"comment\">// use computed to leverage its lazy-caching mechanism</span></span><br><span class=\"line\">    computed[key] = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> fn(store)</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(store.getters, key, &#123;</span><br><span class=\"line\">      get: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> store._vm[key]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// use a Vue instance to store the state tree</span></span><br><span class=\"line\">  <span class=\"comment\">// suppress warnings just in case the user has added</span></span><br><span class=\"line\">  <span class=\"comment\">// some funky global mixins</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> silent = Vue.config.silent</span><br><span class=\"line\">  Vue.config.silent = <span class=\"literal\">true</span></span><br><span class=\"line\">  store._vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    data: &#123; state &#125;,</span><br><span class=\"line\">    computed</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  Vue.config.silent = silent</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// enable strict mode for new vm</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (store.strict) &#123;</span><br><span class=\"line\">    enableStrictMode(store)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (oldVm) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// dispatch changes in all subscribed watchers</span></span><br><span class=\"line\">    <span class=\"comment\">// to force getter re-evaluation.</span></span><br><span class=\"line\">    store._withCommit(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      oldVm.state = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    Vue.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> oldVm.$destroy())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这个方法主要是重置一个私有的 _vm 对象，它是一个 Vue 的实例。这个 _vm 对象会保留我们的 state 树，以及用计算属性的方式存储了 store 的 getters。来具体看看它的实现过程。我们把这个函数拆成几个部分来分析：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> oldVm = store._vm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bind store public getters</span></span><br><span class=\"line\">store.getters = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> wrappedGetters = store._wrappedGetters</span><br><span class=\"line\"><span class=\"keyword\">const</span> computed = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(wrappedGetters).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = wrappedGetters[key]</span><br><span class=\"line\">  <span class=\"comment\">// use computed to leverage its lazy-caching mechanism</span></span><br><span class=\"line\">  computed[key] = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> fn(store)</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(store.getters, key, &#123;</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> store._vm[key]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n<p>这部分留了现有的 store._vm 对象，接着遍历 store._wrappedGetters 对象，在遍历过程中，依次拿到每个 getter 的包装函数，并把这个包装函数执行的结果用 computed 临时变量保存。接着用 es5 的 Object.defineProperty 方法为 store.getters 定义了 get 方法，也就是当我们在组件中调用<code>this.$store.getters.xxxgetters</code>这个方法的时候，会访问 store._vm[xxxgetters]。我们接着往下看：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// use a Vue instance to store the state tree</span></span><br><span class=\"line\"><span class=\"comment\">// suppress warnings just in case the user has added</span></span><br><span class=\"line\"><span class=\"comment\">// some funky global mixins</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> silent = Vue.config.silent</span><br><span class=\"line\">Vue.config.silent = <span class=\"literal\">true</span></span><br><span class=\"line\">store._vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123; state &#125;,</span><br><span class=\"line\">  computed</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">Vue.config.silent = silent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// enable strict mode for new vm</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (store.strict) &#123;</span><br><span class=\"line\">  enableStrictMode(store)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这部分的代码首先先拿全局 Vue.config.silent 的配置，然后临时把这个配置设成 true，接着实例化一个 Vue 的实例，把 store 的状态树 state 作为 data 传入，把我们刚才的临时变量 computed 作为计算属性传入。然后再把之前的 silent 配置重置。设置 silent 为 true 的目的是为了取消这个 _vm 的所有日志和警告。把 computed 对象作为 _vm 的 computed 属性，这样就完成了 getters 的注册。因为当我们在组件中访问 this.$store.getters.xxxgetters 的时候，就相当于访问 store._vm[xxxgetters]，也就是在访问 computed[xxxgetters]，这样就访问到了 xxxgetters 对应的回调函数了。这段代码最后判断 strict 属性决定是否开启严格模式，我们来看看严格模式都干了什么：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enableStrictMode</span> (<span class=\"params\">store</span>) </span>&#123;</span><br><span class=\"line\">  store._vm.$watch(<span class=\"string\">'state'</span>, () =&gt; &#123;</span><br><span class=\"line\">    assert(store._committing, <span class=\"string\">`Do not mutate vuex store state outside mutation handlers.`</span>)</span><br><span class=\"line\">  &#125;, &#123; <span class=\"attr\">deep</span>: <span class=\"literal\">true</span>, <span class=\"attr\">sync</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>严格模式做的事情很简单，监测 store._vm.state 的变化，看看 state 的变化是否通过执行 mutation 的回调函数改变，如果是外部直接修改 state，那么 store._committing 的值为 false，这样就抛出一条错误。再次强调一下，Vuex 中对 state 的修改只能在 mutation 的回调函数里。</p>\n<p>回到 resetStoreVM 函数，我们来看一下最后一部分：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (oldVm) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// dispatch changes in all subscribed watchers</span></span><br><span class=\"line\">  <span class=\"comment\">// to force getter re-evaluation.</span></span><br><span class=\"line\">  store._withCommit(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    oldVm.state = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  Vue.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> oldVm.$destroy())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这里的逻辑很简单，由于这个函数每次都会创建新的 Vue 实例并赋值到 store._vm 上，那么旧的 _vm 对象的状态设置为 null，并调用 $destroy 方法销毁这个旧的 _vm 对象。</p>\n<p>那么到这里，Vuex 的初始化基本告一段落了，初始化核心就是 installModule 和 resetStoreVM 函数。通过对 mutations 、actions 和 getters 的注册，我们了解到 state 的是按模块划分的，按模块的嵌套形成一颗状态树。而 actions、mutations 和 getters 的全局的，其中 actions 和 mutations 的 key 允许重复，但 getters 的 key 是不允许重复的。官方推荐我们给这些全局的对象在定义的时候加一个名称空间来避免命名冲突。<br>从源码的角度介绍完 Vuex 的初始化的玩法，我们再从 Vuex 提供的 API 方向来分析其中的源码，看看这些 API 是如何实现的。</p>\n<h3 id=\"Vuex-API-分析\">Vuex API 分析<a href=\"post/2018-07-26-Vuex源码分析#Vuex-API-分析\"></a></h3><p>Vuex 常见的 API 如 dispatch、commit 、subscribe 我们前面已经介绍过了，这里就不再赘述了，下面介绍的一些 Store 的 API，虽然不常用，但是了解一下也不错。</p>\n<h4 id=\"watch-getter-cb-options\">watch(getter, cb, options)<a href=\"post/2018-07-26-Vuex源码分析#watch-getter-cb-options\"></a></h4><p>watch 作用是响应式的监测一个 getter 方法的返回值，当值改变时调用回调。getter 接收 store 的 state 作为唯一参数。来看一下它的实现：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch (getter, cb, options) &#123;</span><br><span class=\"line\">  assert(<span class=\"keyword\">typeof</span> getter === <span class=\"string\">'function'</span>, <span class=\"string\">`store.watch only accepts a function.`</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._watcherVM.$watch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> getter(<span class=\"keyword\">this</span>.state), cb, options)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>函数首先断言 watch 的 getter 必须是一个方法，接着利用了内部一个 Vue 的实例对象 <code>this._watcherVM</code> 的 $watch 方法，观测 getter 方法返回值的变化，如果有变化则调用 cb 函数，回调函数的参数为新值和旧值。watch 方法返回的是一个方法，调用它则取消观测。</p>\n<h4 id=\"registerModule-path-module\">registerModule(path, module)<a href=\"post/2018-07-26-Vuex源码分析#registerModule-path-module\"></a></h4><p>registerModule 的作用是注册一个动态模块，有的时候当我们异步加载一些业务的时候，可以通过这个 API 接口去动态注册模块，来看一下它的实现：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registerModule (path, <span class=\"built_in\">module</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> path === <span class=\"string\">'string'</span>) path = [path]</span><br><span class=\"line\">  assert(<span class=\"built_in\">Array</span>.isArray(path), <span class=\"string\">`module path must be a string or an Array.`</span>)</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._runtimeModules[path.join(<span class=\"string\">'.'</span>)] = <span class=\"built_in\">module</span></span><br><span class=\"line\">  installModule(<span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>.state, path, <span class=\"built_in\">module</span>)</span><br><span class=\"line\">  <span class=\"comment\">// reset store to update getters...</span></span><br><span class=\"line\">  resetStoreVM(<span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>.state)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>函数首先对 path 判断，如果 path 是一个 string 则把 path 转换成一个 Array。接着把 module 对象缓存到 this._runtimeModules 这个对象里，path 用点连接作为该对象的 key。接着和初始化 Store 的逻辑一样，调用 installModule 和 resetStoreVm 方法安装一遍动态注入的 module。</p>\n<h4 id=\"unregisterModule-path\">unregisterModule(path)<a href=\"post/2018-07-26-Vuex源码分析#unregisterModule-path\"></a></h4><p>和 registerModule 方法相对的就是 unregisterModule 方法，它的作用是注销一个动态模块，来看一下它的实现：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unregisterModule (path) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> path === <span class=\"string\">'string'</span>) path = [path]</span><br><span class=\"line\">  assert(<span class=\"built_in\">Array</span>.isArray(path), <span class=\"string\">`module path must be a string or an Array.`</span>)</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>._runtimeModules[path.join(<span class=\"string\">'.'</span>)]</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._withCommit(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentState = getNestedState(<span class=\"keyword\">this</span>.state, path.slice(<span class=\"number\">0</span>, <span class=\"number\">-1</span>))</span><br><span class=\"line\">    Vue.delete(parentState, path[path.length - <span class=\"number\">1</span>])</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  resetStore(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>函数首先还是对 path 的类型做了判断，这部分逻辑和注册是一样的。接着从 this._runtimeModules 里删掉以 path 点连接的 key 对应的模块。接着通过 this._withCommit 方法把当前模块的 state 对象从父 state 上删除。最后调用 resetStore(this) 方法，来看一下这个方法的定义：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resetStore</span> (<span class=\"params\">store</span>) </span>&#123;</span><br><span class=\"line\">  store._actions = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\">  store._mutations = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\">  store._wrappedGetters = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> state = store.state</span><br><span class=\"line\">  <span class=\"comment\">// init root module</span></span><br><span class=\"line\">  installModule(store, state, [], store._options, <span class=\"literal\">true</span>)</span><br><span class=\"line\">  <span class=\"comment\">// init all runtime modules</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(store._runtimeModules).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">    installModule(store, state, key.split(<span class=\"string\">'.'</span>), store._runtimeModules[key], <span class=\"literal\">true</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// reset vm</span></span><br><span class=\"line\">  resetStoreVM(store, state)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这个方法作用就是重置 store 对象，重置 store 的 _actions、_mutations、_wrappedGetters 等等属性。然后再次调用 installModules 去重新安装一遍 Module 对应的这些属性，注意这里我们的最后一个参数 hot 为true，表示它是一次热更新。这样在 installModule 这个方法体类，如下这段逻辑就不会执行</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">installModule</span> (<span class=\"params\">store, rootState, path, module, hot</span>) </span>&#123;</span><br><span class=\"line\">  ... </span><br><span class=\"line\">  <span class=\"comment\">// set state</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isRoot &amp;&amp; !hot) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentState = getNestedState(rootState, path.slice(<span class=\"number\">0</span>, <span class=\"number\">-1</span>))</span><br><span class=\"line\">    <span class=\"keyword\">const</span> moduleName = path[path.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">    store._withCommit(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      Vue.set(parentState, moduleName, state || &#123;&#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>由于 hot 始终为 true，这里我们就不会重新对状态树做设置，我们的 state 保持不变。因为我们已经明确的删除了对应 path 下的 state 了，要做的事情只不过就是重新注册一遍 muations、actions 以及 getters。</p>\n<p>回调 resetStore 方法，接下来遍历 this._runtimeModules 模块，重新安装所有剩余的 runtime Moudles。最后还是调用 resetStoreVM 方法去重置 Store 的 _vm 对象。</p>\n<h4 id=\"hotUpdate-newOptions\">hotUpdate(newOptions)<a href=\"post/2018-07-26-Vuex源码分析#hotUpdate-newOptions\"></a></h4><p>hotUpdate 的作用是热加载新的 action 和 mutation。 来看一下它的实现：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hotUpdate (newOptions) &#123;</span><br><span class=\"line\">  updateModule(<span class=\"keyword\">this</span>._options, newOptions)</span><br><span class=\"line\">  resetStore(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>函数首先调用 updateModule 方法去更新状态，其中当前 Store 的 opition 配置和要更新的 newOptions 会作为参数。来看一下这个函数的实现：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateModule</span> (<span class=\"params\">targetModule, newModule</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newModule.actions) &#123;</span><br><span class=\"line\">    targetModule.actions = newModule.actions</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newModule.mutations) &#123;</span><br><span class=\"line\">    targetModule.mutations = newModule.mutations</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newModule.getters) &#123;</span><br><span class=\"line\">    targetModule.getters = newModule.getters</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newModule.modules) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> newModule.modules) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!(targetModule.modules &amp;&amp; targetModule.modules[key])) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.warn(</span><br><span class=\"line\">          <span class=\"string\">`[vuex] trying to add a new module '<span class=\"subst\">$&#123;key&#125;</span>' on hot reloading, `</span> +</span><br><span class=\"line\">          <span class=\"string\">'manual reload is needed'</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      updateModule(targetModule.modules[key], newModule.modules[key])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>首先我们对 newOptions 对象的 actions、mutations 以及 getters 做了判断，如果有这些属性的话则替换 targetModule（当前 Store 的 options）对应的属性。最后判断如果 newOptions 包含 modules 这个 key，则遍历这个 modules 对象，如果 modules 对应的 key 不在之前的 modules 中，则报一条警告，因为这是添加一个新的 module ，需要手动重新加载。如果 key 在之前的 modules，则递归调用 updateModule，热更新子模块。</p>\n<p>调用完 updateModule 后，回到 hotUpdate 函数，接着调用 resetStore 方法重新设置 store，刚刚我们已经介绍过了。</p>\n<h4 id=\"replaceState\">replaceState<a href=\"post/2018-07-26-Vuex源码分析#replaceState\"></a></h4><p>replaceState的作用是替换整个 rootState，一般在用于调试，来看一下它的实现：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">replaceState (state) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._withCommit(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._vm.state = state</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>函数非常简单，就是调用 this._withCommit 方法修改 Store 的 rootState，之所以提供这个 API 是由于在我们是不能在 muations 的回调函数外部去改变 state。</p>\n<p>到此为止，API 部分介绍完了，其实整个 Vuex 源码下的 src/index.js 文件里的代码基本都过了一遍。</p>\n<h3 id=\"辅助函数\">辅助函数<a href=\"post/2018-07-26-Vuex源码分析#辅助函数\"></a></h3><p>Vuex 除了提供我们 Store 对象外，还对外提供了一系列的辅助函数，方便我们在代码中使用 Vuex，提供了操作 store 的各种属性的一系列语法糖，下面我们来一起看一下：</p>\n<h4 id=\"mapState\">mapState<a href=\"post/2018-07-26-Vuex源码分析#mapState\"></a></h4><p>mapState 工具函数会将 store 中的 state 映射到局部计算属性中。为了更好理解它的实现，先来看一下它的使用示例：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vuex 提供了独立的构建工具函数 Vuex.mapState</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  computed: mapState(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 箭头函数可以让代码非常简洁</span></span><br><span class=\"line\">    count: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.count,</span><br><span class=\"line\">    <span class=\"comment\">// 传入字符串 'count' 等同于 `state =&gt; state.count`</span></span><br><span class=\"line\">    countAlias: <span class=\"string\">'count'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 想访问局部状态，就必须借助于一个普通函数，函数中使用 `this` 获取局部状态</span></span><br><span class=\"line\">    countPlusLocalState (state) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.count + <span class=\"keyword\">this</span>.localCount</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>当计算属性名称和状态子树名称对应相同时，我们可以向 mapState 工具函数传入一个字符串数组。</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: mapState([</span><br><span class=\"line\">  <span class=\"comment\">// 映射 this.count 到 this.$store.state.count</span></span><br><span class=\"line\">  <span class=\"string\">'count'</span></span><br><span class=\"line\">])</span><br></pre></td></tr></table></div></figure>\n<p>通过例子我们可以直观的看到，mapState 函数可以接受一个对象，也可以接收一个数组，那它底层到底干了什么事呢，我们一起来看一下源码这个函数的定义：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapState</span> (<span class=\"params\">states</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = &#123;&#125;</span><br><span class=\"line\">  normalizeMap(states).forEach(<span class=\"function\">(<span class=\"params\">&#123; key, val &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    res[key] = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mappedState</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> val === <span class=\"string\">'function'</span></span><br><span class=\"line\">        ? val.call(<span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>.$store.state, <span class=\"keyword\">this</span>.$store.getters)</span><br><span class=\"line\">        : <span class=\"keyword\">this</span>.$store.state[val]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>函数首先对传入的参数调用 normalizeMap 方法，我们来看一下这个函数的定义：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">normalizeMap</span> (<span class=\"params\">map</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.isArray(map)</span><br><span class=\"line\">    ? map.map(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> (&#123; key, <span class=\"attr\">val</span>: key &#125;))</span><br><span class=\"line\">    : <span class=\"built_in\">Object</span>.keys(map).map(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> (&#123; key, <span class=\"attr\">val</span>: map[key] &#125;))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这个方法判断参数 map 是否为数组，如果是数组，则调用数组的 map 方法，把数组的每个元素转换成一个 {key, val: key}的对象；否则传入的 map 就是一个对象（从 mapState 的使用场景来看，传入的参数不是数组就是对象），我们调用 Object.keys 方法遍历这个 map 对象的 key，把数组的每个 key 都转换成一个 {key, val: map[key]}的对象。最后我们把这个对象数组作为 normalizeMap 的返回值。</p>\n<p>回到 mapState 函数，在调用了 normalizeMap 函数后，把传入的 states 转换成由 {key, val} 对象构成的数组，接着调用 forEach 方法遍历这个数组，构造一个新的对象，这个新对象每个元素都返回一个新的函数 mappedState，函数对 val 的类型判断，如果 val 是一个函数，则直接调用这个 val 函数，把当前 store 上的 state 和 getters 作为参数，返回值作为 mappedState 的返回值；否则直接把 this.$store.state[val] 作为 mappedState 的返回值。</p>\n<p>那么为何 mapState 函数的返回值是这样一个对象呢，因为 mapState 的作用是把全局的 state 和 getters 映射到当前组件的 computed 计算属性中，我们知道在 Vue 中 每个计算属性都是一个函数。</p>\n<p>为了更加直观地说明，回到刚才的例子：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  computed: mapState(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 箭头函数可以让代码非常简洁</span></span><br><span class=\"line\">    count: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.count,</span><br><span class=\"line\">    <span class=\"comment\">// 传入字符串 'count' 等同于 `state =&gt; state.count`</span></span><br><span class=\"line\">    countAlias: <span class=\"string\">'count'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 想访问局部状态，就必须借助于一个普通函数，函数中使用 `this` 获取局部状态</span></span><br><span class=\"line\">    countPlusLocalState (state) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.count + <span class=\"keyword\">this</span>.localCount</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>经过 mapState 函数调用后的结果，如下所示：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    count() &#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.count</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    countAlias() &#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state[<span class=\"string\">'count'</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    countPlusLocalState() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.count + <span class=\"keyword\">this</span>.localCount</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>我们再看一下 mapState 参数为数组的例子：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: mapState([</span><br><span class=\"line\">  <span class=\"comment\">// 映射 this.count 到 this.$store.state.count</span></span><br><span class=\"line\">  <span class=\"string\">'count'</span></span><br><span class=\"line\">])</span><br></pre></td></tr></table></div></figure>\n<p>经过 mapState 函数调用后的结果，如下所示：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  count() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state[<span class=\"string\">'count'</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"mapGetters\">mapGetters<a href=\"post/2018-07-26-Vuex源码分析#mapGetters\"></a></h4><p>mapGetters 工具函数会将 store 中的 getter 映射到局部计算属性中。它的功能和 mapState 非常类似，我们来直接看它的实现：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapGetters</span> (<span class=\"params\">getters</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = &#123;&#125;</span><br><span class=\"line\">  normalizeMap(getters).forEach(<span class=\"function\">(<span class=\"params\">&#123; key, val &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    res[key] = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mappedGetter</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!(val <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.$store.getters)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(<span class=\"string\">`[vuex] unknown getter: <span class=\"subst\">$&#123;val&#125;</span>`</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.getters[val]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>mapGetters 的实现也和 mapState 很类似，不同的是它的 val 不能是函数，只能是一个字符串，而且会检查 val in this.$store.getters 的值，如果为 false 会输出一条错误日志。为了更直观地理解，我们来看一个简单的例子：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用对象扩展操作符把 getter 混入到 computed 中</span></span><br><span class=\"line\">    ...mapGetters([</span><br><span class=\"line\">      <span class=\"string\">'doneTodosCount'</span>,</span><br><span class=\"line\">      <span class=\"string\">'anotherGetter'</span>,</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    ])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>经过 mapGetters 函数调用后的结果，如下所示：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    doneTodosCount() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.getters[<span class=\"string\">'doneTodosCount'</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    anotherGetter() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.getters[<span class=\"string\">'anotherGetter'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>再看一个参数 mapGetters 参数是对象的例子：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: mapGetters(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 映射 this.doneCount 到 store.getters.doneTodosCount</span></span><br><span class=\"line\">  doneCount: <span class=\"string\">'doneTodosCount'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n<p>经过 mapGetters 函数调用后的结果，如下所示：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  doneCount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.getters[<span class=\"string\">'doneTodosCount'</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"mapActions\">mapActions<a href=\"post/2018-07-26-Vuex源码分析#mapActions\"></a></h4><p>mapActions 工具函数会将 store 中的 dispatch 方法映射到组件的 methods 中。和 mapState、mapGetters 也类似，只不过它映射的地方不是计算属性，而是组件的 methods 对象上。我们来直接看它的实现：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapActions</span> (<span class=\"params\">actions</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = &#123;&#125;</span><br><span class=\"line\">  normalizeMap(actions).forEach(<span class=\"function\">(<span class=\"params\">&#123; key, val &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    res[key] = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mappedAction</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.dispatch.apply(<span class=\"keyword\">this</span>.$store, [val].concat(args))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>可以看到，函数的实现套路和 mapState、mapGetters 差不多，甚至更简单一些， 实际上就是做了一层函数包装。为了更直观地理解，我们来看一个简单的例子：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    ...mapActions([</span><br><span class=\"line\">      <span class=\"string\">'increment'</span> <span class=\"comment\">// 映射 this.increment() 到 this.$store.dispatch('increment')</span></span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    ...mapActions(&#123;</span><br><span class=\"line\">      add: <span class=\"string\">'increment'</span> <span class=\"comment\">// 映射 this.add() to this.$store.dispatch('increment')</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>经过 mapActions 函数调用后的结果，如下所示：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    increment(...args) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.dispatch.apply(<span class=\"keyword\">this</span>.$store, [<span class=\"string\">'increment'</span>].concat(args))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    add(...args) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.dispatch.apply(<span class=\"keyword\">this</span>.$store, [<span class=\"string\">'increment'</span>].concat(args))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"mapMutations\">mapMutations<a href=\"post/2018-07-26-Vuex源码分析#mapMutations\"></a></h4><p>mapMutations 工具函数会将 store 中的 commit 方法映射到组件的 methods 中。和 mapActions 的功能几乎一样，我们来直接看它的实现：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapMutations</span> (<span class=\"params\">mutations</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = &#123;&#125;</span><br><span class=\"line\">  normalizeMap(mutations).forEach(<span class=\"function\">(<span class=\"params\">&#123; key, val &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    res[key] = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mappedMutation</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.commit.apply(<span class=\"keyword\">this</span>.$store, [val].concat(args))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>函数的实现几乎也和 mapActions 一样，唯一差别就是映射的是 store 的 commit 方法。为了更直观地理解，我们来看一个简单的例子：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapMutations &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    ...mapMutations([</span><br><span class=\"line\">      <span class=\"string\">'increment'</span> <span class=\"comment\">// 映射 this.increment() 到 this.$store.commit('increment')</span></span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    ...mapMutations(&#123;</span><br><span class=\"line\">      add: <span class=\"string\">'increment'</span> <span class=\"comment\">// 映射 this.add() 到 this.$store.commit('increment')</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>经过 mapMutations 函数调用后的结果，如下所示：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    increment(...args) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.commit.apply(<span class=\"keyword\">this</span>.$store, [<span class=\"string\">'increment'</span>].concat(args))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    add(...args) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.commit.apply(<span class=\"keyword\">this</span>.$store, [<span class=\"string\">'increment'</span>].concat(args))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"插件\">插件<a href=\"post/2018-07-26-Vuex源码分析#插件\"></a></h3><p>Vuex 的 store 接收 plugins 选项，一个 Vuex 的插件就是一个简单的方法，接收 store 作为唯一参数。插件作用通常是用来监听每次 mutation 的变化，来做一些事情。</p>\n<p>在 store 的构造函数的最后，我们通过如下代码调用插件：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> devtoolPlugin <span class=\"keyword\">from</span> <span class=\"string\">'./plugins/devtool'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// apply plugins</span></span><br><span class=\"line\">plugins.concat(devtoolPlugin).forEach(<span class=\"function\"><span class=\"params\">plugin</span> =&gt;</span> plugin(<span class=\"keyword\">this</span>))</span><br></pre></td></tr></table></div></figure>\n<p>我们通常实例化 store 的时候，还会调用 logger 插件，代码如下：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> createLogger <span class=\"keyword\">from</span> <span class=\"string\">'vuex/dist/logger'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> debug = process.env.NODE_ENV !== <span class=\"string\">'production'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  plugins: debug ? [createLogger()] : []</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n<p>在上述 2 个例子中，我们分别调用了 devtoolPlugin 和 createLogger() 2 个插件，它们是 Vuex 内置插件，我们接下来分别看一下他们的实现。</p>\n<h4 id=\"devtoolPlugin\">devtoolPlugin<a href=\"post/2018-07-26-Vuex源码分析#devtoolPlugin\"></a></h4><p>devtoolPlugin 主要功能是利用 Vue 的开发者工具和 Vuex 做配合，通过开发者工具的面板展示 Vuex 的状态。它的源码在 src/plugins/devtool.js 中，来看一下这个插件到底做了哪些事情。</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> devtoolHook =</span><br><span class=\"line\">  <span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span> &amp;&amp;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.__VUE_DEVTOOLS_GLOBAL_HOOK__</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">devtoolPlugin</span> (<span class=\"params\">store</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!devtoolHook) <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">  store._devtoolHook = devtoolHook</span><br><span class=\"line\"></span><br><span class=\"line\">  devtoolHook.emit(<span class=\"string\">'vuex:init'</span>, store)</span><br><span class=\"line\"></span><br><span class=\"line\">  devtoolHook.on(<span class=\"string\">'vuex:travel-to-state'</span>, targetState =&gt; &#123;</span><br><span class=\"line\">    store.replaceState(targetState)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  store.subscribe(<span class=\"function\">(<span class=\"params\">mutation, state</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    devtoolHook.emit(<span class=\"string\">'vuex:mutation'</span>, mutation, state)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>我们直接从对外暴露的 devtoolPlugin 函数看起，函数首先判断了devtoolHook 的值，如果我们浏览器装了 Vue 开发者工具，那么在 window 上就会有一个 <code>__VUE_DEVTOOLS_GLOBAL_HOOK__</code> 的引用， 那么这个 devtoolHook 就指向这个引用。</p>\n<p>接下来通过 devtoolHook.emit(‘vuex:init’, store) 派发一个 Vuex 初始化的事件，这样开发者工具就能拿到当前这个 store 实例。</p>\n<p>接下来通过 devtoolHook.on(‘vuex:travel-to-state’, targetState =&gt; { store.replaceState(targetState) })监听 Vuex 的 traval-to-state 的事件，把当前的状态树替换成目标状态树，这个功能也是利用 Vue 开发者工具替换 Vuex 的状态。</p>\n<p>最后通过 store.subscribe((mutation, state) =&gt; { devtoolHook.emit(‘vuex:mutation’, mutation, state) }) 方法订阅 store 的 state 的变化，当 store 的 mutation 提交了 state 的变化， 会触发回调函数——通过 devtoolHook 派发一个 Vuex mutation 的事件，mutation 和 rootState 作为参数，这样开发者工具就可以观测到 Vuex state 的实时变化，在面板上展示最新的状态树。</p>\n<h4 id=\"loggerPlugin\">loggerPlugin<a href=\"post/2018-07-26-Vuex源码分析#loggerPlugin\"></a></h4><p>通常在开发环境中，我们希望实时把 mutation 的动作以及 store 的 state 的变化实时输出，那么我们可以用 loggerPlugin 帮我们做这个事情。它的源码在 src/plugins/logger.js 中，来看一下这个插件到底做了哪些事情。</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Credits: borrowed code from fcomb/redux-logger</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; deepCopy &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../util'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createLogger</span> (<span class=\"params\">&#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  collapsed = true,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  transformer = state =&gt; state,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  mutationTransformer = mut =&gt; mut</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">store</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> prevState = deepCopy(store.state)</span><br><span class=\"line\"></span><br><span class=\"line\">    store.subscribe(<span class=\"function\">(<span class=\"params\">mutation, state</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">console</span> === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> nextState = deepCopy(state)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">      <span class=\"keyword\">const</span> formattedTime = <span class=\"string\">` @ <span class=\"subst\">$&#123;pad(time.getHours(), <span class=\"number\">2</span>)&#125;</span>:<span class=\"subst\">$&#123;pad(time.getMinutes(), <span class=\"number\">2</span>)&#125;</span>:<span class=\"subst\">$&#123;pad(time.getSeconds(), <span class=\"number\">2</span>)&#125;</span>.<span class=\"subst\">$&#123;pad(time.getMilliseconds(), <span class=\"number\">3</span>)&#125;</span>`</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> formattedMutation = mutationTransformer(mutation)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> message = <span class=\"string\">`mutation <span class=\"subst\">$&#123;mutation.type&#125;</span><span class=\"subst\">$&#123;formattedTime&#125;</span>`</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> startMessage = collapsed</span><br><span class=\"line\">        ? <span class=\"built_in\">console</span>.groupCollapsed</span><br><span class=\"line\">        : <span class=\"built_in\">console</span>.group</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// render</span></span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        startMessage.call(<span class=\"built_in\">console</span>, message)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(message)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'%c prev state'</span>, <span class=\"string\">'color: #9E9E9E; font-weight: bold'</span>, transformer(prevState))</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'%c mutation'</span>, <span class=\"string\">'color: #03A9F4; font-weight: bold'</span>, formattedMutation)</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'%c next state'</span>, <span class=\"string\">'color: #4CAF50; font-weight: bold'</span>, transformer(nextState))</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.groupEnd()</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'—— log end ——'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      prevState = nextState</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">repeat</span> (<span class=\"params\">str, times</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(times + <span class=\"number\">1</span>)).join(str)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pad</span> (<span class=\"params\">num, maxLength</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> repeat(<span class=\"string\">'0'</span>, maxLength - num.toString().length) + num</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>插件对外暴露的是 createLogger 方法，它实际上接受 3 个参数，它们都有默认值，通常我们用默认值就可以。createLogger 的返回的是一个函数，当我执行 logger 插件的时候，实际上执行的是这个函数，下面来看一下这个函数做了哪些事情。</p>\n<p>函数首先执行了 let prevState = deepCopy(store.state) 深拷贝当前 store 的 rootState。这里为什么要深拷贝，因为如果是单纯的引用，那么 store.state 的任何变化都会影响这个引用，这样就无法记录上一个状态了。我们来了解一下 deepCopy 的实现，在 src/util.js 里定义：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">find</span> (<span class=\"params\">list, f</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> list.filter(f)[<span class=\"number\">0</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCopy</span> (<span class=\"params\">obj, cache = []</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// just return if obj is immutable value</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj === <span class=\"literal\">null</span> || <span class=\"keyword\">typeof</span> obj !== <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// if obj is hit, it is in circular structure</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> hit = find(cache, c =&gt; c.original === obj)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hit) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hit.copy</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> copy = <span class=\"built_in\">Array</span>.isArray(obj) ? [] : &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// put the copy into cache at first</span></span><br><span class=\"line\">  <span class=\"comment\">// because we want to refer it in recursive deepCopy</span></span><br><span class=\"line\">  cache.push(&#123;</span><br><span class=\"line\">    original: obj,</span><br><span class=\"line\">    copy</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(obj).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">    copy[key] = deepCopy(obj[key], cache)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> copy</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>deepCopy 并不陌生，很多开源库如 loadash、jQuery 都有类似的实现，原理也不难理解，主要是构造一个新的对象，遍历原对象或者数组，递归调用 deepCopy。不过这里的实现有一个有意思的地方，在每次执行 deepCopy 的时候，会用 cache 数组缓存当前嵌套的对象，以及执行 deepCopy 返回的 copy。如果在 deepCopy 的过程中通过<code>find(cache, c =&gt; c.original === obj)</code>发现有循环引用的时候，直接返回 cache 中对应的 copy，这样就避免了无限循环的情况。</p>\n<p>回到 loggerPlugin 函数，通过 deepCopy 拷贝了当前 state 的副本并用 prevState 变量保存，接下来调用 store.subscribe 方法订阅 store 的 state 的变。 在回调函数中，也是先通过 deepCopy 方法拿到当前的 state 的副本，并用 nextState 变量保存。接下来获取当前格式化时间已经格式化的 mutation 变化的字符串，然后利用 console.group 以及 console.log 分组输出 prevState、mutation以及 nextState，这里可以通过我们 createLogger 的参数 collapsed、transformer 以及 mutationTransformer 来控制我们最终 log 的显示效果。在函数的最后，我们把 nextState 赋值给 prevState，便于下一次 mutation。</p>\n","prev":{"title":"Vuex源码读后感","link":"post/2018-07-27-Vuex源码读后感"},"next":{"title":"[转]Vuex框架原理与源码分析","link":"post/2018-07-25-Vuex框架原理与源码分析"},"plink":"https://vincentdou.github.io/blog/post/2018-07-26-Vuex源码分析/","toc":[{"title":"目录结构","id":"目录结构","index":"1"},{"title":"源码分析","id":"源码分析","index":"2","children":[{"title":"从入口开始","id":"从入口开始","index":"2.1"},{"title":"认识 Store 构造函数","id":"认识-Store-构造函数","index":"2.2"},{"title":"Vuex 的初始化核心","id":"Vuex-的初始化核心","index":"2.3","children":[{"title":"installModule","id":"installModule","index":"2.3.1"},{"title":"registerMutation","id":"registerMutation","index":"2.3.2"},{"title":"registerAction","id":"registerAction","index":"2.3.3"},{"title":"wrapGetters","id":"wrapGetters","index":"2.3.4"},{"title":"resetStoreVM","id":"resetStoreVM","index":"2.3.5"}]},{"title":"Vuex API 分析","id":"Vuex-API-分析","index":"2.4","children":[{"title":"watch(getter, cb, options)","id":"watch-getter-cb-options","index":"2.4.1"},{"title":"registerModule(path, module)","id":"registerModule-path-module","index":"2.4.2"},{"title":"unregisterModule(path)","id":"unregisterModule-path","index":"2.4.3"},{"title":"hotUpdate(newOptions)","id":"hotUpdate-newOptions","index":"2.4.4"},{"title":"replaceState","id":"replaceState","index":"2.4.5"}]},{"title":"辅助函数","id":"辅助函数","index":"2.5","children":[{"title":"mapState","id":"mapState","index":"2.5.1"},{"title":"mapGetters","id":"mapGetters","index":"2.5.2"},{"title":"mapActions","id":"mapActions","index":"2.5.3"},{"title":"mapMutations","id":"mapMutations","index":"2.5.4"}]},{"title":"插件","id":"插件","index":"2.6","children":[{"title":"devtoolPlugin","id":"devtoolPlugin","index":"2.6.1"},{"title":"loggerPlugin","id":"loggerPlugin","index":"2.6.2"}]}]}]}