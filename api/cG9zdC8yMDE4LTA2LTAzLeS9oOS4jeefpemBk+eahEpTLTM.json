{"title":"你不知道的JS-this与对象原型-对象","date":"2018-06-02T16:00:00.000Z","author":"Vincent","link":"post/2018-06-03-你不知道的JS-3","tags":["JavaScript","你不知道的JS","前端开发"],"updated":"2019-01-02T08:49:00.266Z","content":"<h3 id=\"对象\">对象<a href=\"post/2018-06-03-你不知道的JS-3#对象\"></a></h3><h4 id=\"关于「JavaScript中的一切都是对象」\">关于「JavaScript中的一切都是对象」<a href=\"post/2018-06-03-你不知道的JS-3#关于「JavaScript中的一切都是对象」\"></a></h4><p>应该说，这种说法是错误的。JavaScript 中有 string、number、boolean、symbol、null、和 undefined 6 种基础类型，它们本身并不是对象，只是在执行方法时会被暂时的转化为对应的对象类型。</p>\n<p>JavaScript 中有一些内置对象：tring、Number、Boolean、Object、Function、Array、Date、RegExp、Error。或者说，这些是内置函数，可以当作构造函数来使用。</p>\n<p>函数是对象的一种子类型（技术上讲，叫做“可调用对象”），函数在 JS 中被称为“一等公民”。</p>\n<p>数组也是一种形式的对象，带有特别的行为。数组在内容的组织上要稍稍比一般的对象更加结构化。</p>\n<h4 id=\"计算型属性名\">计算型属性名<a href=\"post/2018-06-03-你不知道的JS-3#计算型属性名\"></a></h4><p>ES6 加入了 计算型属性名，在一个字面对象声明的键名称位置，你可以指定一个表达式，用 [ ] 括起来：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> prefix = <span class=\"string\">\"foo\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;</span><br><span class=\"line\">\t[prefix + <span class=\"string\">\"bar\"</span>]: <span class=\"string\">\"hello\"</span>,</span><br><span class=\"line\">\t[prefix + <span class=\"string\">\"baz\"</span>]: <span class=\"string\">\"world\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">myObject[<span class=\"string\">\"foobar\"</span>]; <span class=\"comment\">// hello</span></span><br><span class=\"line\">myObject[<span class=\"string\">\"foobaz\"</span>]; <span class=\"comment\">// world</span></span><br></pre></td></tr></table></div></figure>\n<h4 id=\"属性描述符\">属性描述符<a href=\"post/2018-06-03-你不知道的JS-3#属性描述符\"></a></h4><p>ES5 之后，所有的属性都用<strong>属性描述符（Property Descriptors）</strong>来描述，可以通过<code>getOwnPropertyDescriptor</code>来查看：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;</span><br><span class=\"line\">\ta: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyDescriptor( myObject, <span class=\"string\">\"a\"</span> );</span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    value: 2,</span></span><br><span class=\"line\"><span class=\"comment\">//    writable: true,</span></span><br><span class=\"line\"><span class=\"comment\">//    enumerable: true,</span></span><br><span class=\"line\"><span class=\"comment\">//    configurable: true</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></div></figure>\n<p>可以通过<code>Object.defineProperty()</code>进行定义：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty( myObject, <span class=\"string\">\"a\"</span>, &#123;</span><br><span class=\"line\">\tvalue: <span class=\"number\">2</span>,</span><br><span class=\"line\">\twritable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\tconfigurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\tenumerable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125; );</span><br><span class=\"line\"></span><br><span class=\"line\">myObject.a; <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></div></figure>\n<p>属性描述符除了 value 还包含三个性质：可写性（writable）、可配置性（configurable）、可枚举性（enumerable）。</p>\n<ul>\n<li>writable 控制着你改变属性值的能力，一个 writable 为 false 的属性无法通过赋值操作进行改变；</li>\n<li>configurable 控制你通过 defineProperty 修改属性的描述符定义的能力，还有使用 delete 操作符移除既存属性的能力；</li>\n<li>enumerable 控制着一个属性是否能在特定的对象-属性枚举操作中出现，比如 for..in 循环。设置为 false 将会阻止它出现在这样的枚举中，即使它依然完全是可以访问的，设置为 true 会使它出现。所有普通的用户定义属性都默认是可 enumerable 的。</li>\n</ul>\n<h4 id=\"不可变性\">不可变性<a href=\"post/2018-06-03-你不知道的JS-3#不可变性\"></a></h4><p>ES5 提供了几种不同的微妙方式将属性或对象设置为不可改变：</p>\n<ul>\n<li>对象常量：通过将 writable:false 与 configurable:false 组合，你可以实质上创建了一个作为对象属性的常量（不能被改变，重定义或删除）；</li>\n<li>防止扩展：如果你想防止一个对象被添加新的属性，但另一方面保留其他既存的对象属性，可以调用 <code>Object.preventExtensions(..)</code>；</li>\n<li>封印：<code>Object.seal(..)</code>创建一个“封印”的对象，这意味着它实质上在当前的对象上调用<code>Object.preventExtensions(..)</code>，同时也将它所有的既存属性标记为 configurable:false；</li>\n<li>冻结：<code>Object.freeze(..)</code>创建一个冻结的对象，这意味着它实质上在当前的对象上调用<code>Object.seal(..)</code>，同时也将它所有的“数据访问”属性设置为 writable:false，所以它们的值不可改变。</li>\n</ul>\n<h4 id=\"Getters-与-Setters\">Getters 与 Setters<a href=\"post/2018-06-03-你不知道的JS-3#Getters-与-Setters\"></a></h4><p>ES5 引入了 getters 和 setters。getter 是实际上调用一个隐藏函数来取得值的属性。setter 是实际上调用一个隐藏函数来设置值的属性。</p>\n<p>getter:<br><figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 为 `a` 定义一个 getter</span></span><br><span class=\"line\">\tget a() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(</span><br><span class=\"line\">\tmyObject,\t<span class=\"comment\">// 目标对象</span></span><br><span class=\"line\">\t<span class=\"string\">\"b\"</span>,\t\t<span class=\"comment\">// 属性名</span></span><br><span class=\"line\">\t&#123;\t\t\t<span class=\"comment\">// 描述符</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 为 `b` 定义 getter</span></span><br><span class=\"line\">\t\tget: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a * <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 确保 `b` 作为对象属性出现</span></span><br><span class=\"line\">\t\tenumerable: <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">myObject.a; <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">myObject.b; <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></div></figure></p>\n<p>setter:<br><figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 为 `a` 定义 getter</span></span><br><span class=\"line\">\tget a() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._a_;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 为 `a` 定义 setter</span></span><br><span class=\"line\">\tset a(val) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>._a_ = val * <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">myObject.a = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">myObject.a; <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></div></figure></p>\n<h4 id=\"存在性\">存在性<a href=\"post/2018-06-03-你不知道的JS-3#存在性\"></a></h4><ul>\n<li><code>in</code>操作符会检查属性是否存在于对象中，或者是否存在于<code>[[Prototype]]</code>链对象遍历的更高层中。相比之下，<code>hasOwnProperty(..)</code>不会查询 <code>[[Prototype]]</code>链；</li>\n<li>将<code>for..in</code>循环实施在数组上可能会给出意外的结果，因为枚举一个数组将不仅包含所有的数字下标，还包含所有的可枚举属性。所以一个好主意是：将<code>for..in</code>循环仅用于对象，而为存储在数组中的值使用传统的 for 循环并用数字索引迭代；</li>\n<li>enumerable: true 的属性不出现在<code>for..in</code>循环中，但是可以通过 in 操作符的存在性检查；</li>\n<li><code>propertyIsEnumerable(..)</code>测试一个给定的属性名是否直接存在于对象上，并且是 enumerable: true；</li>\n<li><code>Object.keys(..)</code>返回一个所有可枚举属性的数组，而<code>Object.getOwnPropertyNames(..)</code>返回一个所有属性的数组，不论能不能枚举。</li>\n</ul>\n<h4 id=\"迭代\">迭代<a href=\"post/2018-06-03-你不知道的JS-3#迭代\"></a></h4><p>for..in 循环迭代一个对象上（包括它的 [[Prototype]] 链）所有的可迭代属性。想要迭代值，可以通过索引来引用值。</p>\n<p>ES5 为数组加入了几个迭代帮助方法，包括 forEach(..)、every(..)、和 some(..)。</p>\n<ul>\n<li><code>forEach(..)</code>将会迭代数组中所有的值，并且忽略回调的返回值；</li>\n<li><code>every(..)</code>会一直迭代到最后，或者当回调返回一个 false；</li>\n<li><code>some(..)</code>会一直迭代到最后，或者当回调返回一个 true。</li>\n</ul>\n<h4 id=\"关于for-of\">关于for..of<a href=\"post/2018-06-03-你不知道的JS-3#关于for-of\"></a></h4><p>ES6 加入了一个有用的 for..of 循环语法，用来迭代数组（和对象，如果这个对象有定义的迭代器）：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myArray = [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> v <span class=\"keyword\">of</span> myArray) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log( v );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></div></figure>\n<p><code>for..of</code>循环要求被迭代的东西提供一个迭代器对象（从一个在语言规范中叫做<code>@@iterator</code>的默认内部函数那里得到），每次循环都调用一次这个迭代器对象的<code>next()</code>方法，循环迭代的内容就是这些连续的返回值。数组拥有内建的<code>@@iterator</code>。</p>\n<blockquote>\n<p>@@iterator 本身不是迭代器对象，而是一个返回迭代器对象的方法。</p>\n</blockquote>\n<p>普通的对象没有内建的<code>@@iterator</code>，可以自己定义：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;</span><br><span class=\"line\">\ta: <span class=\"number\">2</span>,</span><br><span class=\"line\">\tb: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty( myObject, <span class=\"built_in\">Symbol</span>.iterator, &#123;</span><br><span class=\"line\">\tenumerable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\twritable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\tconfigurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\tvalue: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> o = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> ks = <span class=\"built_in\">Object</span>.keys( o );</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\tnext: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tvalue: o[ks[idx++]],</span><br><span class=\"line\">\t\t\t\t\tdone: (idx &gt; ks.length)</span><br><span class=\"line\">\t\t\t\t&#125;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 手动迭代 `myObject`</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> it = myObject[<span class=\"built_in\">Symbol</span>.iterator]();</span><br><span class=\"line\">it.next(); <span class=\"comment\">// &#123; value:2, done:false &#125;</span></span><br><span class=\"line\">it.next(); <span class=\"comment\">// &#123; value:3, done:false &#125;</span></span><br><span class=\"line\">it.next(); <span class=\"comment\">// &#123; value:undefined, done:true &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用 `for..of` 迭代 `myObject`</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> v <span class=\"keyword\">of</span> myObject) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log( v );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></div></figure>\n<h3 id=\"混合对象「类」\">混合对象「类」<a href=\"post/2018-06-03-你不知道的JS-3#混合对象「类」\"></a></h3><p>面向类的设计模式：实例化（instantiation）、继承（inheritance）与（相对）多态(relative polymorphism）。</p>\n<p>面向对象设计模式的：迭代器（iterator）、观察者（observer）、工厂（factory）、单例（singleton）。</p>\n<p>JavaScript 实际上并不拥有类。</p>\n<h3 id=\"原型\">原型<a href=\"post/2018-06-03-你不知道的JS-3#原型\"></a></h3><h4 id=\"Object-prototype\">Object.prototype<a href=\"post/2018-06-03-你不知道的JS-3#Object-prototype\"></a></h4><p>每个普通的<code>[[Prototype]]</code>链的最顶端，是内建的<code>Object.prototype</code>。因为 JavaScript 中所有普通对象（内建，而非被宿主环境扩展的）都源自<code>Object.prototype</code>对象，这个对象包含各种在整个 JS 中被使用的共通工具，比如<code>.toString()</code>、<code>.valueOf()</code>、<code>.hasOwnProperty(..)</code>和<code>.isPrototypeOf(..)</code>。</p>\n<h4 id=\"设置与遮蔽属性\">设置与遮蔽属性<a href=\"post/2018-06-03-你不知道的JS-3#设置与遮蔽属性\"></a></h4><p>如果属性名<code>foo</code>同时存在于<code>myObject</code>本身和从<code>myObject</code>开始的<code>[[Prototype]]</code>链的更高层，这样的情况称为遮蔽。直接存在于<code>myObject</code>上的<code>foo</code>属性会遮蔽任何出现在链条高层的<code>foo</code>属性，因为<code>myObject.foo</code>查询总是在寻找链条最底层的<code>foo</code>属性。</p>\n<p>一个存在于<code>[[Prototype]]</code>链的高层的属性，对它的赋值不总是造成遮蔽，因为只读属性的存在会阻止同名属性在<code>[[Prototype]]</code>链的低层被创建，这种情况下可以使用<code>Object.defineProperty(..)</code>。</p>\n<p><code>++</code>操作符会产生隐式遮蔽：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> anotherObject = &#123;</span><br><span class=\"line\">\ta: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myObject = <span class=\"built_in\">Object</span>.create( anotherObject );</span><br><span class=\"line\"></span><br><span class=\"line\">anotherObject.a; <span class=\"comment\">// 2</span></span><br><span class=\"line\">myObject.a; <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">anotherObject.hasOwnProperty( <span class=\"string\">\"a\"</span> ); <span class=\"comment\">// true</span></span><br><span class=\"line\">myObject.hasOwnProperty( <span class=\"string\">\"a\"</span> ); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">myObject.a++; <span class=\"comment\">// 噢，隐式遮蔽！++ 操作符相当于 myObject.a = myObject.a + 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">anotherObject.a; <span class=\"comment\">// 2</span></span><br><span class=\"line\">myObject.a; <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">myObject.hasOwnProperty( <span class=\"string\">\"a\"</span> ); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></div></figure>\n<h4 id=\"构造函数\">构造函数<a href=\"post/2018-06-03-你不知道的JS-3#构造函数\"></a></h4><p>构造器是在前面用 new 关键字调用的任何函数。函数不是构造器，但是当且仅当 new 被使用时，函数调用是一个「构造器调用」。</p>\n<h4 id=\"关于-constructor\">关于.constructor<a href=\"post/2018-06-03-你不知道的JS-3#关于-constructor\"></a></h4><figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Foo.prototype.myName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> Foo( <span class=\"string\">\"a\"</span> );</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> Foo( <span class=\"string\">\"b\"</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">a.myName(); <span class=\"comment\">// \"a\"</span></span><br><span class=\"line\">b.myName(); <span class=\"comment\">// \"b\"</span></span><br></pre></td></tr></table></div></figure>\n<p><code>.constructor</code>只是<code>.prototype</code>对象上的一个不可枚举属性，并不意味着「被XX构建」。</p>\n<p>在<code>Foo.prototype</code>上的<code>.constructor</code>属性仅当<code>Foo</code>函数被声明时才出现在对象上。</p>\n<h4 id=\"「原型继承」\">「原型继承」<a href=\"post/2018-06-03-你不知道的JS-3#「原型继承」\"></a></h4><figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Foo.prototype.myName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Bar</span>(<span class=\"params\">name,label</span>) </span>&#123;</span><br><span class=\"line\">\tFoo.call( <span class=\"keyword\">this</span>, name );</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.label = label;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里，我们创建一个新的 `Bar.prototype` 链接链到 `Foo.prototype`</span></span><br><span class=\"line\">Bar.prototype = <span class=\"built_in\">Object</span>.create( Foo.prototype );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意！现在 `Bar.prototype.constructor` 不存在了，</span></span><br><span class=\"line\"><span class=\"comment\">// 如果你有依赖这个属性的习惯的话，它可以被手动“修复”。</span></span><br><span class=\"line\"></span><br><span class=\"line\">Bar.prototype.myLabel = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.label;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> Bar( <span class=\"string\">\"a\"</span>, <span class=\"string\">\"obj a\"</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">a.myName(); <span class=\"comment\">// \"a\"</span></span><br><span class=\"line\">a.myLabel(); <span class=\"comment\">// \"obj a\"</span></span><br></pre></td></tr></table></div></figure>\n<p>上面<code>Bar.prototype = Object.create(Foo.prototype)</code>的作用是创建一个新的<code>Bar.prototype</code>对象并把它关联到<code>Foo.prototype</code>。当<code>function Bar() { .. }</code>被声明时，就像其他函数一样，拥有一个链到默认对象的<code>.prototype</code>链接。但是 那个对象没有链到我们希望的<code>Foo.prototype</code>。所以，我们创建了一个新对象，链到我们希望的地方，并将原来的错误链接的对象扔掉。</p>\n<p>关于修改<code>.prototype</code>，有这两种常见误解：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不会如你期望的那样工作!</span></span><br><span class=\"line\">Bar.prototype = Foo.prototype;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 会如你期望的那样工作</span></span><br><span class=\"line\"><span class=\"comment\">// 但会带有你可能不想要的副作用 :(</span></span><br><span class=\"line\">Bar.prototype = <span class=\"keyword\">new</span> Foo();</span><br></pre></td></tr></table></div></figure>\n<p><code>Bar.prototype = Foo.prototype</code>不会创建新对象让<code>Bar.prototype</code>链接。它只是让<code>Bar.prototype</code>成为<code>Foo.prototype</code>的另一个引用，将<code>Bar</code>直接链到<code>Foo</code>链着的 同一个对象：<code>Foo.prototype</code>。这意味着当你开始赋值时，你修改的不是一个分离的对象而是那个被分享的<code>Foo.prototype</code>对象本身，它将影响到所有链接到<code>Foo.prototype</code>的对象。</p>\n<p><code>Bar.prototype = new Foo()</code>确实创建了一个新的对象，这个新对象也的确链接到了我们希望的<code>Foo.prototype</code>。但是，它是用<code>Foo(..)</code>“构造器调用”来这样做的，如果这个函数有任何副作用，这些副作用就会在链接时发生。</p>\n<p>ES6 中增加了<code>Object.setPrototypeOf(..)</code>辅助工具来修改既存对象的链接：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES6 以前</span></span><br><span class=\"line\"><span class=\"comment\">// 扔掉默认既存的 `Bar.prototype`</span></span><br><span class=\"line\">Bar.prototype = <span class=\"built_in\">Object</span>.create( Foo.prototype );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6+</span></span><br><span class=\"line\"><span class=\"comment\">// 修改既存的 `Bar.prototype`</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf( Bar.prototype, Foo.prototype );</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"检查「类」关系\">检查「类」关系<a href=\"post/2018-06-03-你不知道的JS-3#检查「类」关系\"></a></h4><p><strong>instanceof</strong></p>\n<p><code>instanceof</code>操作符的左侧接收一个普通对象，右侧接收一个函数。<code>instanceof</code>回答的问题是：在 a 的整个<code>[[Prototype]]</code>链中，是否有指向<code>Foo.prototype</code>的对象？</p>\n<p><strong>.isPrototypeOf</strong></p>\n<p><code>isPrototypeOf(..)</code>回答的问题是：在 a 的整个<code>[[Prototype]]</code>链中，<code>Foo.prototype</code>出现过吗？考察两个对象之间的关系。</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 简单地：`b` 在 `c` 的 `[[Prototype]]` 链中出现过吗？</span></span><br><span class=\"line\">b.isPrototypeOf( c );</span><br></pre></td></tr></table></div></figure>\n<p><strong><code>.__proto__</code></strong></p>\n<p><code>.__proto__</code>直到 ES6 才被标准化，<code>.__proto__</code>实际上不存在于你考察的对象上。事实上，它和其他的共通工具在一起(<code>.toString()</code>，<code>.isPrototypeOf(..)</code>等)，存在于内建的<code>Object.prototype</code>上。<code>.__proto__</code>虽然看起来像一个属性，但实际上将它看做是一个 getter/setter 更合适。</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty( <span class=\"built_in\">Object</span>.prototype, <span class=\"string\">\"__proto__\"</span>, &#123;</span><br><span class=\"line\">\tget: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// ES5 的 getPrototypeOf(..)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.getPrototypeOf( <span class=\"keyword\">this</span> );</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tset: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// ES6 的 setPrototypeOf(..)</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">Object</span>.setPrototypeOf( <span class=\"keyword\">this</span>, o );</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> o;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; );</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"Object-create\">Object.create()<a href=\"post/2018-06-03-你不知道的JS-3#Object-create\"></a></h4><figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">\tsomething: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log( <span class=\"string\">\"Tell me something good...\"</span> );</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"built_in\">Object</span>.create( foo );</span><br><span class=\"line\"></span><br><span class=\"line\">bar.something(); <span class=\"comment\">// Tell me something good...</span></span><br></pre></td></tr></table></div></figure>\n<p><code>Object.create(..)</code>创建了一个链接到我们指定的对象（foo）上的新对象（bar），这给了我们<code>[[Prototype]]</code>机制的所有力量（委托），而且没有 new 函数作为类和构造器调用产生的所有没必要的复杂性，搞乱<code>.prototype</code>和<code>.constructor</code>引用，或任何其他的多余的东西。</p>\n<p><code>Object.create(..)</code>的第二个参数通过声明每个新属性的 属性描述符指定了要添加在新对象上的属性。</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> anotherObject = &#123;</span><br><span class=\"line\">\ta: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myObject = <span class=\"built_in\">Object</span>.create( anotherObject, &#123;</span><br><span class=\"line\">\tb: &#123;</span><br><span class=\"line\">\t\tenumerable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\twritable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\tconfigurable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\tvalue: <span class=\"number\">3</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tc: &#123;</span><br><span class=\"line\">\t\tenumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\twritable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\tconfigurable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\tvalue: <span class=\"number\">4</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\"></span><br><span class=\"line\">myObject.hasOwnProperty( <span class=\"string\">\"a\"</span> ); <span class=\"comment\">// false</span></span><br><span class=\"line\">myObject.hasOwnProperty( <span class=\"string\">\"b\"</span> ); <span class=\"comment\">// true</span></span><br><span class=\"line\">myObject.hasOwnProperty( <span class=\"string\">\"c\"</span> ); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">myObject.a; <span class=\"comment\">// 2</span></span><br><span class=\"line\">myObject.b; <span class=\"comment\">// 3</span></span><br><span class=\"line\">myObject.c; <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></div></figure>\n<p><code>Object.create(..)</code>在 ES5 中被加入。对于 ES5 之前的环境，我们需要一个对<code>Object.create(..)</code>部分 polyfill 工具：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Object</span>.create) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">Object</span>.create = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">\t\tF.prototype = o;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n","prev":{"title":"你不知道的JS-异步与性能","link":"post/2018-06-10-你不知道的JS-4"},"next":{"title":"你不知道的JS-this与对象原型-this","link":"post/2018-05-25-你不知道的JS-2"},"plink":"https://vincentdou.github.io/blog/post/2018-06-03-你不知道的JS-3/"}