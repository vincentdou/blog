---
layout:     post
title:      "你不知道的JS-异步与性能"
date:       2018-06-10
author:     "Vincent"
catalog:    true
tags:
    - 前端开发
    - JavaScript
    - 你不知道的JS
---

### 异步: 现在与稍后

每当你将一部分代码包进 function 并且规定它应当为了响应某些事件而执行（定时器，鼠标点击，Ajax应答等等），你就创建了一个**稍后**代码块儿，也因此在你的程序中引入了异步。

#### 异步控制台

使用 console 可能会遇到这样的情况：

```js
var a = {
	index: 1
};

// 稍后
console.log( a ); // 可能{ index: 1 }，也可能{ index: 2 }。

// 再稍后
a.index++;
```

console 不是 JavaScript 官方的一部分，而是由宿主环境添加到JS上的。所以关于它如何工作，没有相应的语言规范或一组需求。某些条件下，有些浏览器为了更好的性能选择在后台异步地处理 console I/O。所以有时候 console.log(..) 实际上不会立即输出它得到的东西。

> 如果你遇到了这种罕见的情况，最好的选择是使用JS调试器的断点，而不是依赖console的输出。第二好的选择是通过将目标对象序列化为一个string强制取得一个它的快照，比如用JSON.stringify(..)。

#### 事件轮询（Event Loop）

JS 引擎对时间没有天生的感觉，反而是一个任意 JS 代码段的按需执行环境。是它周围的环境在不停地安排“事件”。

通过一些伪代码来对它形成一个概念：

```js
// `eventLoop`是一个像队列一样的数组（先进先出）
var eventLoop = [ ];
var event;

// “永远”执行
while (true) {
	// 执行一个"tick"
	if (eventLoop.length > 0) {
		// 在队列中取得下一个事件
		event = eventLoop.shift();

		// 现在执行下一个事件
		try {
			event();
		}
		catch (err) {
			reportError(err);
		}
	}
}
```

有一个通过 while 循环来表现的持续不断的循环，这个循环的每一次迭代称为一个“tick”。在每一个“tick”中，如果队列中有一个事件在等待，它就会被取出执行。这些事件就是你的函数回调。

#### 协作并发

将一个长时间运行的“进程”打断为许多步骤或批处理，使得其他的并发“进程”有机会将它们的操作穿插进事件轮询队列。

想象这种场景：

```js
var res = [];

// `response(..)`从Ajax调用收到一个结果数组
function response(data) {
	// 连接到既存的`res`数组上
	res = res.concat(
		// 制造一个新的变形过的数组，所有的`data`值都翻倍
		data.map( function(val){
			return val * 2;
		} )
	);
}

// ajax(..) 是某个包中任意的Ajax函数
ajax( "http://some.url.1", response );
ajax( "http://some.url.2", response );
```

如果 "http://some.url.1" 首先返回它的结果，整个结果列表将会一次性映射进 res。如果只有几千或更少的结果记录，一般来说不是什么大事。但假如有1千万个记录，那么就可能会花一段时间运行。当这样的“处理”运行时，页面上没有任何事情可以发生，包括不能有另一个 response(..) 调用，不能有 UI 更新，甚至不能有用户事件比如滚动，打字，按钮点击等。非常痛苦。

为了制造协作性更强、更友好而且不独占事件轮询队列的并发系统，你可以在一个异步批处理中处理这些结果，在批处理的每一步都“让出”事件轮询来让其他等待的事件发生：

```js
var res = [];

// `response(..)`从Ajax调用收到一个结果数组
function response(data) {
	// 我们一次只处理1000件
	var chunk = data.splice( 0, 1000 );

	// 连接到既存的`res`数组上
	res = res.concat(
		// 制造一个新的变形过的数组，所有的`data`值都翻倍
		chunk.map( function(val){
			return val * 2;
		} )
	);

	// 还有东西要处理吗？
	if (data.length > 0) {
		// 异步规划下一个批处理
		setTimeout( function(){
			response( data );
		}, 0 );
	}
}

// ajax(..) 是某个包中任意的Ajax函数
ajax( "http://some.url.1", response );
ajax( "http://some.url.2", response );
```

> 从技术上讲，setTimeout(..0) 没有直接将一条记录插入事件轮询队列。计时器将会在下一个运行机会将事件插入。比如，两个连续的 setTimeout(..0) 调用不会严格保证以调用的顺序被处理，所以我们可能看到各种时间偏移的情况，使这样的事件的顺序是不可预知的。

### 回调