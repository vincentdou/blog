---
layout:     post
title:      "你不知道的JS-作用域与闭包"
date:       2018-05-14
author:     "Vincent"
catalog:    true
tags:
    - 前端开发
    - JavaScript
    - 你不知道的JS
---

> 尽管 JavaScript 一般被划分到“动态”或者“解释型”语言的范畴，但是其实它是一个编译型语言。

### 什么是作用域？

「编译」三步骤：

1. 分词/词法分析： 将一连串字符打断成（对于语言来说）有意义的片段，称为token（记号）。举例来说，考虑这段程序：`var a = 2;`。这段程序很可能会被打断成如下token：`var`，`a`，`=`，`2`，和 `;`。空格也许会被保留为一个 token，这要看它是否是有意义的。

    > 注意： 分词和词法分析之间的区别是微妙和学术上的，其中心在于这些 token 是否以 *无状态* 或 *有状态* 的方式被识别。简而言之，如果分词器去调用有状态的解析规则来弄清a是否应当被考虑为一个不同的 token，还是只是其他 token 的一部分，那么这就是 词法分析。

2. 解析： 将一个 token 的流（数组）转换为一个嵌套元素的树，它总体上表示了程序的语法结构。这棵树称为 “AST”（Abstract Syntax Tree —— 抽象语法树）。

    > `var a = 2;` 的树也许开始于称为 VariableDeclaration（变量声明）顶层节点，带有一个称为 Identifier（标识符）的子节点（它的值为a），和另一个称为 AssignmentExpression（赋值表达式）的子节点，而这个子节点本身带有一个称为 NumericLiteral（数字字面量）的子节点（它的值为2）。

3. 代码生成： 这个处理将 AST 转换为可执行的代码。这一部分将根据语言，它的目标平台等因素有很大的不同。

> 对于一个变量赋值，发生了两个不同的动作：第一，`编译器`声明一个变量（如果先前没有在当前作用域中声明过），第二，当执行时，`引擎`在`作用域`中查询这个变量并给它赋值，如果找到的话。

#### LHS查询和RHS查询

当一个变量出现在赋值操作的左手边时，会进行 LHS 查询，当一个变量出现在赋值操作的右手边时，会进行 RHS 查询。

> “赋值的目标（LHS）” & “赋值的源（RHS）”

> 将函数声明考虑为一个我们在这里讨论的 LHS 查询赋值是不太合适的

**LHS查询**

- 对变量进行赋值，就会使用 LHS 查询；
- `=`号操作符或调用函数时传入参数的操作都会导致关联作用域的赋值查询（LHS）；
- 不成功的 LHS 引用，非严格模式下会导致自动隐式创建一个全局变量，严格模式下或者抛出 ReferenceError 异常。

**RHS查询**

- 如果是获取变量的值，就会使用RHS查询；
- 不成功的 RHS 引用会导致抛出 ReferenceError异常。（即RHS查询在所有嵌套作用域到没找到所需变量）；
- 如果 RHS 查询到了一个变量，但是你尝试对这个变量进行不合理操作，比如对一个非函数类型的值进行函数调用，或者引用 null 或 undefined 类型的值中的属性，引擎就会抛出 TypeError 异常。

### 词法作用域

> 词法作用域是 JavaScript 所采用的作用域模型

在 JavaScript 中有两种机制可以“欺骗”词法作用域： `eval(..)` 和 `with` 。

- JavaScript 中的`eval(..)`函数接收一个字符串作为参数值，并将这个字符串的内容看作是好像它已经被实际编写在程序的那个位置上。因此它会欺骗词法作用域。

> 当`eval(..)`被用于一个操作它自己的词法作用域的 strict 模式程序时，在`eval(..)`内部做出的声明不会实际上修改包围它的作用域。

> 在 JavaScript 中还有其他的工具拥有与`eval(..)`非常类似的效果。`setTimeout(..)`和`setInterval(..)`可以为它们各自的第一个参数值接收一个字符串，其内容将会被`eval`为一个动态生成的函数的代码。`new Function(..)`函数构造器类似地为它的最后一个参数值接收一个代码字符串，来把它转换为一个动态生成的函数（前面的参数值，如果有的话，将作为新函数的形式参数）。

- with 的常见方式是作为一种缩写，来引用一个对象的多个属性，而不必每次都重复对象引用本身。

> 尽管一个`with`块儿将一个对象视为一个词法作用域，但是在`with`块儿内部的一个普通`var`声明将不会归于这个`with`块儿的作用域，而是归于包含它的函数作用域。
> 如果`eval(..)`函数接收一个含有一个或多个声明的代码字符串，它就会修改现存的词法作用域，而`with`语句实际上是从你传递给它的对象中凭空制造了一个全新的词法作用域。

> strict 模式下`with`不允许使用

这些机制的缺点是，它压制了*引擎*在作用域查询上进行编译期优化的能力，因为引擎不得不悲观地假定这样的优化是不合法的。这两种特性的结果就是代码将会运行的更慢。不要使用它们。

### 函数与块儿作用域

在 JavaScript 中函数是最常见的作用域单位。在另一个函数内部声明的变量和函数，实质上对任何外围“作用域”都是“隐藏的”，这是优秀软件的一个有意的设计原则。

从ES3开始，`try/catch`结构在`catch`子句上拥有块儿作用域。

在ES6中，引入了`let`关键字（var 关键字的表兄弟）允许在任意代码块中声明变量。使用`let`做出的声明将不会在它们所出现的整个块儿的作用域中提升。

**函数声明** **函数表达式**

#### IIFE(立即被调用函数表达)

Immediately Invoked Function Expression

`(function foo(){ .. })()`第一个外围的`()`使这个函数变成表达式，而第二个`()`执行这个函数。

### 提升

JavaScript 引擎会将`var a = 2`看作`var a`和`a = 2`两个分离的语句，第一个是编译期的任务，而第二个是执行时的任务。

这将导致在一个作用域内的所有声明，不论它们出现在何处，都会在代码本身被执行前 首先 被处理。你可以将它可视化为声明（变量与函数）被“移动”到它们 **各自** 的作用域顶部（不是程序的顶端），这就是我们所说的“提升”。

> 只有声明本身被提升了，而任何赋值或者其他的执行逻辑都被留在原处。提升是以作用域为单位的。

> **函数声明会被提升，但是函数表达式不会。**

```js
foo(); // TypeError
bar(); // ReferenceError

var foo = function bar() {
    // ...
};
```

这个代码段可以（使用提升）更准确地解释为：

```js
var foo;

foo(); // TypeError
bar(); // ReferenceError

foo = function() {
    var bar = ...self...
    // ...
}
```

#### 函数会首先被提升，然后才是变量。

```js
foo(); // 1

var foo;

function foo() {
	console.log( 1 );
}

foo = function() {
	console.log( 2 );
};
```

1 被打印了，而不是 2，这个代码段被引擎解释执行为：

```js
function foo() {
	console.log( 1 );
}

foo(); // 1

foo = function() {
	console.log( 2 );
};
```

`var foo`是一个重复（因此被无视）的声明，即便它出现在`function foo()...`声明之前，因为函数声明是在普通变量之前被提升的。

> 后续的函数声明会覆盖前一个

> 普通的块儿作用域里的函数声明一般会被提升至外围的作用域

### 作用域闭包

- 当函数是在当前词法作用域之外执行，如果函数可以记住并访问所在的词法作用域时，就产生了闭包。

- 计时器、事件处理器、Ajax请求、跨窗口消息、web worker、或者任何其他的异步（或同步！）任务，当你传入一个回调函数，你就在它周围悬挂了一些闭包！

```js
for (var i=1; i<=5; i++) {
	(function(j){
		setTimeout( function timer(){
			console.log( j );
		}, j*1000 );
	})( i );
}
```

模块要求两个关键性质：

1. 必须有一个外部的外围函数，而且它必须至少被调用一次（每次创建一个新的模块实例）。

2. 外围的函数必须至少返回一个内部函数，这样这个内部函数才拥有私有作用域的闭包，并且可以访问和/或修改这个私有状态。

```js
var foo = (function CoolModule() {
	var something = "cool";
	var another = [1, 2, 3];

	function doSomething() {
		console.log( something );
	}

	function doAnother() {
		console.log( another.join( " ! " ) );
	}

	return {
		doSomething: doSomething,
		doAnother: doAnother
	};
})();

foo.doSomething(); // cool
foo.doAnother(); // 1 ! 2 ! 3
```

#### 模块化

```js
var MyModules = (function Manager() {
	var modules = {};

	function define(name, deps, impl) {
		for (var i=0; i<deps.length; i++) {
			deps[i] = modules[deps[i]];
		}
		modules[name] = impl.apply( impl, deps );
	}

	function get(name) {
		return modules[name];
	}

	return {
		define: define,
		get: get
	};
})();
```

```js
MyModules.define( "bar", [], function(){
	function hello(who) {
		return "Let me introduce: " + who;
	}

	return {
		hello: hello
	};
} );

MyModules.define( "foo", ["bar"], function(bar){
	var hungry = "hippo";

	function awesome() {
		console.log( bar.hello( hungry ).toUpperCase() );
	}

	return {
		awesome: awesome
	};
} );

var bar = MyModules.get( "bar" );
var foo = MyModules.get( "foo" );

console.log(
	bar.hello( "hippo" )
); // Let me introduce: hippo

foo.awesome(); // LET ME INTRODUCE: HIPPO
```

#### ES6中的模块

- import 在当前的作用域中导入一个模块的 API 的一个或多个成员，每个都绑定到一个变量；
- module 将整个模块的 API 导入到一个被绑定的变量；
- export 为当前模块的公有API导出一个标识符（变量，函数）。在一个模块的定义中，这些操作符可以根据需要使用任意多次。

### 附录

#### 动态作用域

- 词法作用域是一组关于引擎如何查询变量和它在何处能够找到变量的规则。词法作用域的关键性质是，它是在代码编写时被定义的。
- 动态作用域是在运行时被确定的，它的作用域链条是基于调用栈的，而不是代码中作用域的嵌套。
- 两者的关键差异是：词法作用域是编写时的，而动态作用域（和 this）是运行时的。词法作用域关心的是函数在何处被声明，但是动态作用域关心的是函数从何处被调用。
- JavaScript 没有动态作用域，但是 this 机制有些像动态作用域。

#### 填补块儿作用域

ES6 才提出了 let，而早在 ES3 的`try/catch`就已经有了块儿作用域。我们想在前 ES6 环境中使用块儿作用域可以这样：

```js
// ES6 let
{
	let a = 2;
	console.log( a ); // 2
}

console.log( a ); // ReferenceError
```

转为：

```js
// ES3 try/catch
try{throw 2}catch(a){
	console.log( a ); // 2
}

console.log( a ); // ReferenceError
```

Traceur的转移结果：

```js
{
	try {
		throw undefined;
	} catch (a) {
		a = 2;
		console.log( a );
	}
}

console.log( a );
```

