---
layout:     post
title:      "你不知道的JS-this与对象原型-对象"
date:       2018-06-03
author:     "Vincent"
catalog:    true
tags:
    - 前端开发
    - JavaScript
    - 你不知道的JS
---

### 对象

#### 关于「JavaScript中的一切都是对象」

应该说，这种说法是错误的。JavaScript 中有 string、number、boolean、symbol、null、和 undefined 6 种基础类型，它们本身并不是对象，只是在执行方法时会被暂时的转化为对应的对象类型。

JavaScript 中有一些内置对象：tring、Number、Boolean、Object、Function、Array、Date、RegExp、Error。或者说，这些是内置函数，可以当作构造函数来使用。

函数是对象的一种子类型（技术上讲，叫做“可调用对象”），函数在 JS 中被称为“一等公民”。

数组也是一种形式的对象，带有特别的行为。数组在内容的组织上要稍稍比一般的对象更加结构化。

#### 计算型属性名

ES6 加入了 计算型属性名，在一个字面对象声明的键名称位置，你可以指定一个表达式，用 [ ] 括起来：

```js
var prefix = "foo";

var myObject = {
	[prefix + "bar"]: "hello",
	[prefix + "baz"]: "world"
};

myObject["foobar"]; // hello
myObject["foobaz"]; // world
```

#### 属性描述符

ES5 之后，所有的属性都用**属性描述符（Property Descriptors）**来描述，可以通过`getOwnPropertyDescriptor`来查看：

```js
var myObject = {
	a: 2
};

Object.getOwnPropertyDescriptor( myObject, "a" );
// {
//    value: 2,
//    writable: true,
//    enumerable: true,
//    configurable: true
// }
```

可以通过`Object.defineProperty()`进行定义：

```js
var myObject = {};

Object.defineProperty( myObject, "a", {
	value: 2,
	writable: true,
	configurable: true,
	enumerable: true
} );

myObject.a; // 2
```

属性描述符除了 value 还包含三个性质：可写性（writable）、可配置性（configurable）、可枚举性（enumerable）。

- writable 控制着你改变属性值的能力，一个 writable 为 false 的属性无法通过赋值操作进行改变；
- configurable 控制你通过 defineProperty 修改属性的描述符定义的能力，还有使用 delete 操作符移除既存属性的能力；
- enumerable 控制着一个属性是否能在特定的对象-属性枚举操作中出现，比如 for..in 循环。设置为 false 将会阻止它出现在这样的枚举中，即使它依然完全是可以访问的，设置为 true 会使它出现。所有普通的用户定义属性都默认是可 enumerable 的。

#### 不可变性

ES5 提供了几种不同的微妙方式将属性或对象设置为不可改变：

- 对象常量：通过将 writable:false 与 configurable:false 组合，你可以实质上创建了一个作为对象属性的常量（不能被改变，重定义或删除）；
- 防止扩展：如果你想防止一个对象被添加新的属性，但另一方面保留其他既存的对象属性，可以调用 `Object.preventExtensions(..)`；
- 封印：`Object.seal(..)`创建一个“封印”的对象，这意味着它实质上在当前的对象上调用`Object.preventExtensions(..)`，同时也将它所有的既存属性标记为 configurable:false；
- 冻结：`Object.freeze(..)`创建一个冻结的对象，这意味着它实质上在当前的对象上调用`Object.seal(..)`，同时也将它所有的“数据访问”属性设置为 writable:false，所以它们的值不可改变。

#### Getters 与 Setters

ES5 引入了 getters 和 setters。getter 是实际上调用一个隐藏函数来取得值的属性。setter 是实际上调用一个隐藏函数来设置值的属性。

getter:
```js
var myObject = {
	// 为 `a` 定义一个 getter
	get a() {
		return 2;
	}
};

Object.defineProperty(
	myObject,	// 目标对象
	"b",		// 属性名
	{			// 描述符
		// 为 `b` 定义 getter
		get: function(){ return this.a * 2 },

		// 确保 `b` 作为对象属性出现
		enumerable: true
	}
);

myObject.a; // 2

myObject.b; // 4
```

setter:
```js
var myObject = {
	// 为 `a` 定义 getter
	get a() {
		return this._a_;
	},

	// 为 `a` 定义 setter
	set a(val) {
		this._a_ = val * 2;
	}
};

myObject.a = 2;

myObject.a; // 4
```

#### 存在性

- `in`操作符会检查属性是否存在于对象中，或者是否存在于`[[Prototype]]`链对象遍历的更高层中。相比之下，`hasOwnProperty(..)`不会查询 `[[Prototype]]`链；
- 将`for..in`循环实施在数组上可能会给出意外的结果，因为枚举一个数组将不仅包含所有的数字下标，还包含所有的可枚举属性。所以一个好主意是：将`for..in`循环仅用于对象，而为存储在数组中的值使用传统的 for 循环并用数字索引迭代；
- enumerable: true 的属性不出现在`for..in`循环中，但是可以通过 in 操作符的存在性检查；
- `propertyIsEnumerable(..)`测试一个给定的属性名是否直接存在于对象上，并且是 enumerable: true；
- `Object.keys(..)`返回一个所有可枚举属性的数组，而`Object.getOwnPropertyNames(..)`返回一个所有属性的数组，不论能不能枚举。

#### 迭代

for..in 循环迭代一个对象上（包括它的 [[Prototype]] 链）所有的可迭代属性。想要迭代值，可以通过索引来引用值。

ES5 为数组加入了几个迭代帮助方法，包括 forEach(..)、every(..)、和 some(..)。

- `forEach(..)`将会迭代数组中所有的值，并且忽略回调的返回值；
- `every(..)`会一直迭代到最后，或者当回调返回一个 false；
- `some(..)`会一直迭代到最后，或者当回调返回一个 true。

#### 关于for..of

ES6 加入了一个有用的 for..of 循环语法，用来迭代数组（和对象，如果这个对象有定义的迭代器）：

```js
var myArray = [ 1, 2, 3 ];

for (var v of myArray) {
	console.log( v );
}
// 1
// 2
// 3
```

`for..of`循环要求被迭代的东西提供一个迭代器对象（从一个在语言规范中叫做`@@iterator`的默认内部函数那里得到），每次循环都调用一次这个迭代器对象的`next()`方法，循环迭代的内容就是这些连续的返回值。数组拥有内建的`@@iterator`。

> @@iterator 本身不是迭代器对象，而是一个返回迭代器对象的方法。

普通的对象没有内建的`@@iterator`，可以自己定义：

```js
var myObject = {
	a: 2,
	b: 3
};

Object.defineProperty( myObject, Symbol.iterator, {
	enumerable: false,
	writable: false,
	configurable: true,
	value: function() {
		var o = this;
		var idx = 0;
		var ks = Object.keys( o );
		return {
			next: function() {
				return {
					value: o[ks[idx++]],
					done: (idx > ks.length)
				};
			}
		};
	}
} );

// 手动迭代 `myObject`
var it = myObject[Symbol.iterator]();
it.next(); // { value:2, done:false }
it.next(); // { value:3, done:false }
it.next(); // { value:undefined, done:true }

// 用 `for..of` 迭代 `myObject`
for (var v of myObject) {
	console.log( v );
}
// 2
// 3
```

### 混合对象「类」

面向类的设计模式：实例化（instantiation）、继承（inheritance）与（相对）多态(relative polymorphism）。

面向对象设计模式的：迭代器（iterator）、观察者（observer）、工厂（factory）、单例（singleton）。

JavaScript 实际上并不拥有类。

### 原型

#### Object.prototype

每个普通的`[[Prototype]]`链的最顶端，是内建的`Object.prototype`。因为 JavaScript 中所有普通对象（内建，而非被宿主环境扩展的）都源自`Object.prototype`对象，这个对象包含各种在整个 JS 中被使用的共通工具，比如`.toString()`、`.valueOf()`、`.hasOwnProperty(..)`和`.isPrototypeOf(..)`。

#### 设置与遮蔽属性

如果属性名`foo`同时存在于`myObject`本身和从`myObject`开始的`[[Prototype]]`链的更高层，这样的情况称为遮蔽。直接存在于`myObject`上的`foo`属性会遮蔽任何出现在链条高层的`foo`属性，因为`myObject.foo`查询总是在寻找链条最底层的`foo`属性。

一个存在于`[[Prototype]]`链的高层的属性，对它的赋值不总是造成遮蔽，因为只读属性的存在会阻止同名属性在`[[Prototype]]`链的低层被创建，这种情况下可以使用`Object.defineProperty(..)`。

`++`操作符会产生隐式遮蔽：

```js
var anotherObject = {
	a: 2
};

var myObject = Object.create( anotherObject );

anotherObject.a; // 2
myObject.a; // 2

anotherObject.hasOwnProperty( "a" ); // true
myObject.hasOwnProperty( "a" ); // false

myObject.a++; // 噢，隐式遮蔽！++ 操作符相当于 myObject.a = myObject.a + 1

anotherObject.a; // 2
myObject.a; // 3

myObject.hasOwnProperty( "a" ); // true
```

#### 构造函数

构造器是在前面用 new 关键字调用的任何函数。函数不是构造器，但是当且仅当 new 被使用时，函数调用是一个「构造器调用」。

#### 关于.constructor

```js
function Foo(name) {
	this.name = name;
}

Foo.prototype.myName = function() {
	return this.name;
};

var a = new Foo( "a" );
var b = new Foo( "b" );

a.myName(); // "a"
b.myName(); // "b"
```

`.constructor`只是`.prototype`对象上的一个不可枚举属性，并不意味着「被XX构建」。

在`Foo.prototype`上的`.constructor`属性仅当`Foo`函数被声明时才出现在对象上。

#### 「原型继承」

```js
function Foo(name) {
	this.name = name;
}

Foo.prototype.myName = function() {
	return this.name;
};

function Bar(name,label) {
	Foo.call( this, name );
	this.label = label;
}

// 这里，我们创建一个新的 `Bar.prototype` 链接链到 `Foo.prototype`
Bar.prototype = Object.create( Foo.prototype );

// 注意！现在 `Bar.prototype.constructor` 不存在了，
// 如果你有依赖这个属性的习惯的话，它可以被手动“修复”。

Bar.prototype.myLabel = function() {
	return this.label;
};

var a = new Bar( "a", "obj a" );

a.myName(); // "a"
a.myLabel(); // "obj a"
```

上面`Bar.prototype = Object.create(Foo.prototype)`的作用是创建一个新的`Bar.prototype`对象并把它关联到`Foo.prototype`。当`function Bar() { .. }`被声明时，就像其他函数一样，拥有一个链到默认对象的`.prototype`链接。但是 那个对象没有链到我们希望的`Foo.prototype`。所以，我们创建了一个新对象，链到我们希望的地方，并将原来的错误链接的对象扔掉。

关于修改`.prototype`，有这两种常见误解：

```js
// 不会如你期望的那样工作!
Bar.prototype = Foo.prototype;

// 会如你期望的那样工作
// 但会带有你可能不想要的副作用 :(
Bar.prototype = new Foo();
```

`Bar.prototype = Foo.prototype`不会创建新对象让`Bar.prototype`链接。它只是让`Bar.prototype`成为`Foo.prototype`的另一个引用，将`Bar`直接链到`Foo`链着的 同一个对象：`Foo.prototype`。这意味着当你开始赋值时，你修改的不是一个分离的对象而是那个被分享的`Foo.prototype`对象本身，它将影响到所有链接到`Foo.prototype`的对象。

`Bar.prototype = new Foo()`确实创建了一个新的对象，这个新对象也的确链接到了我们希望的`Foo.prototype`。但是，它是用`Foo(..)`“构造器调用”来这样做的，如果这个函数有任何副作用，这些副作用就会在链接时发生。

ES6 中增加了`Object.setPrototypeOf(..)`辅助工具来修改既存对象的链接：

```js
// ES6 以前
// 扔掉默认既存的 `Bar.prototype`
Bar.prototype = Object.create( Foo.prototype );

// ES6+
// 修改既存的 `Bar.prototype`
Object.setPrototypeOf( Bar.prototype, Foo.prototype );
```

#### 检查「类」关系

**instanceof**

`instanceof`操作符的左侧接收一个普通对象，右侧接收一个函数。`instanceof`回答的问题是：在 a 的整个`[[Prototype]]`链中，是否有指向`Foo.prototype`的对象？

**.isPrototypeOf**

`isPrototypeOf(..)`回答的问题是：在 a 的整个`[[Prototype]]`链中，`Foo.prototype`出现过吗？考察两个对象之间的关系。

```js
// 简单地：`b` 在 `c` 的 `[[Prototype]]` 链中出现过吗？
b.isPrototypeOf( c );
```

**`.__proto__`**

`.__proto__`直到 ES6 才被标准化，`.__proto__`实际上不存在于你考察的对象上。事实上，它和其他的共通工具在一起(`.toString()`，`.isPrototypeOf(..)`等)，存在于内建的`Object.prototype`上。`.__proto__`虽然看起来像一个属性，但实际上将它看做是一个 getter/setter 更合适。

```js
Object.defineProperty( Object.prototype, "__proto__", {
	get: function() {
		// ES5 的 getPrototypeOf(..)
		return Object.getPrototypeOf( this );
	},
	set: function(o) {
		// ES6 的 setPrototypeOf(..)
		Object.setPrototypeOf( this, o );
		return o;
	}
} );
```

#### Object.create()

```js
var foo = {
	something: function() {
		console.log( "Tell me something good..." );
	}
};

var bar = Object.create( foo );

bar.something(); // Tell me something good...
```

`Object.create(..)`创建了一个链接到我们指定的对象（foo）上的新对象（bar），这给了我们`[[Prototype]]`机制的所有力量（委托），而且没有 new 函数作为类和构造器调用产生的所有没必要的复杂性，搞乱`.prototype`和`.constructor`引用，或任何其他的多余的东西。

`Object.create(..)`的第二个参数通过声明每个新属性的 属性描述符指定了要添加在新对象上的属性。

```js
var anotherObject = {
	a: 2
};

var myObject = Object.create( anotherObject, {
	b: {
		enumerable: false,
		writable: true,
		configurable: false,
		value: 3
	},
	c: {
		enumerable: true,
		writable: false,
		configurable: false,
		value: 4
	}
} );

myObject.hasOwnProperty( "a" ); // false
myObject.hasOwnProperty( "b" ); // true
myObject.hasOwnProperty( "c" ); // true

myObject.a; // 2
myObject.b; // 3
myObject.c; // 4
```

`Object.create(..)`在 ES5 中被加入。对于 ES5 之前的环境，我们需要一个对`Object.create(..)`部分 polyfill 工具：

```js
if (!Object.create) {
	Object.create = function(o) {
		function F(){}
		F.prototype = o;
		return new F();
	};
}
```
