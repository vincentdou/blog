{"title":"JS 中的 NaN","date":"2018-08-06T16:00:00.000Z","author":"Vincent","excerpt":"","slug":"2018-08-07-NaN","tags":["JavaScript","前端开发"],"updated":"2019-01-02T08:49:00.266Z","content":"<blockquote>\n<p>NaN 相关的问题应该属于是 JS 的一些缺陷性的知识，但我还是觉得花几分钟搞清楚好一点。</p>\n</blockquote>\n<h3 id=\"NaN值的产生\"><a href=\"#NaN值的产生\" class=\"headerlink\" title=\"NaN值的产生\"></a>NaN值的产生</h3><p>当算术运算返回一个未定义的或无法表示的值时，NaN就产生了。但是，NaN并不一定用于表示某些值超出表示范围的情况。将某些不能强制转换为数值的非数值转换为数值的时候，也会得到NaN。</p>\n<p>例如，0 除以0会返回NaN —— 但是其他数除以0则不会返回NaN。</p>\n<h3 id=\"NaN-和-Number-NaN\"><a href=\"#NaN-和-Number-NaN\" class=\"headerlink\" title=\"NaN 和 Number.NaN\"></a>NaN 和 Number.NaN</h3><ul>\n<li>NaN 是一个全局对象的属性，类型为<code>&#39;string&#39;</code>；</li>\n<li>跟 NaN 相似，Number.NaN 是 Number 的一个静态属性，不必创建一个 Number 实例来访问该属性，可以直接使用 Number.NaN 来访问该静态属性；</li>\n<li>在现代浏览器中（ES5中）， NaN 属性是一个不可配置（non-configurable），不可写（non-writable）的属性。但在ES3中，这个属性的值是可以被更改的，但是也应该避免覆盖；</li>\n<li>NaN 不等于任何值包括它自身，因此等号运算符（<code>==</code> 和 <code>===</code>）不能被用来判断一个值是否是 NaN。必须使用<code>Number.isNaN()</code>或<code>isNaN()</code>函数。</li>\n</ul>\n<h3 id=\"isNaN-和-Number-isNaN\"><a href=\"#isNaN-和-Number-isNaN\" class=\"headerlink\" title=\"isNaN() 和 Number.isNaN()\"></a>isNaN() 和 Number.isNaN()</h3><ul>\n<li>isNaN() 是 JS 的一个内置函数；</li>\n<li>Number.isNaN() 是 ES6 中定义的；</li>\n<li>isNaN() 在参数不是 Number 类型时会首先尝试将这个参数转换为数值，Number.isNaN() 不会。</li>\n</ul>\n<h4 id=\"isNaN-的怪异行为\"><a href=\"#isNaN-的怪异行为\" class=\"headerlink\" title=\"isNaN() 的怪异行为\"></a>isNaN() 的怪异行为</h4><p>由于 <strong>isNaN() 在参数不是 Number 类型时会首先尝试将这个参数转换为数值</strong>，因此，对于能被强制转换为有效的非NaN数值来说（空字符串和布尔值分别会被强制转换为数值 0 和 1），返回 false 值也许会让人感觉莫名其妙。比如说，空字符串就明显“不是数值（not a number）”。</p>\n<p>示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>);       <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"literal\">undefined</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(&#123;&#125;);        <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"literal\">true</span>);      <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"literal\">null</span>);      <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"number\">37</span>);        <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// strings</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"string\">\"37\"</span>);      <span class=\"comment\">// false: 可以被转换成数值37</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"string\">\"37.37\"</span>);   <span class=\"comment\">// false: 可以被转换成数值37.37</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"string\">\"37,5\"</span>);    <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"string\">'123ABC'</span>);  <span class=\"comment\">// true:  parseInt(\"123ABC\")的结果是 123, 但是Number(\"123ABC\")结果是 NaN</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"string\">\"\"</span>);        <span class=\"comment\">// false: 空字符串被转换成0</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"string\">\" \"</span>);       <span class=\"comment\">// false: 包含空格的字符串被转换成0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dates</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());                <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toString());     <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"string\">\"blabla\"</span>)   <span class=\"comment\">// true: \"blabla\"不能转换成数值</span></span><br><span class=\"line\">                  <span class=\"comment\">// 转换成数值失败， 返回NaN</span></span><br></pre></td></tr></table></figure>\n<p>而 Number.isNaN() 不会：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"literal\">NaN</span>);        <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"built_in\">Number</span>.NaN); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"number\">0</span> / <span class=\"number\">0</span>)       <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面这几个如果使用全局的 isNaN() 时，会返回 true。</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"string\">\"NaN\"</span>);      <span class=\"comment\">// false，字符串 \"NaN\" 不会被隐式转换成数字 NaN。</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"literal\">undefined</span>);  <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isNaN(&#123;&#125;);         <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"string\">\"blabla\"</span>);   <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面的都返回 false</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"number\">37</span>);</span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"string\">\"37\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"string\">\"37.37\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"string\">\" \"</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"对-isNaN-的-polyfill\"><a href=\"#对-isNaN-的-polyfill\" class=\"headerlink\" title=\"对 isNaN 的 polyfill\"></a>对 isNaN 的 polyfill</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>.isNaN = <span class=\"built_in\">Number</span>.isNaN || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> value === <span class=\"string\">\"number\"</span> &amp;&amp; <span class=\"built_in\">isNaN</span>(value)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种是加多一个 typeof 的判断</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>.isNaN = <span class=\"built_in\">Number</span>.isNaN || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = <span class=\"built_in\">parseInt</span>(value)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n !== value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种是先对参数 parseInt 再判断 parseInt 前后有无变化，对于非 number 类型肯定有变化所以返回 false，而 NaN 不等于自身也会返回 false。</p>\n<blockquote>\n<p>参考：<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN\" target=\"_blank\" rel=\"noopener\">NaN - JavaScript | MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN\" target=\"_blank\" rel=\"noopener\">Number.NaN - JavaScript | MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isNaN\" target=\"_blank\" rel=\"noopener\">isNaN - JavaScript | MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\" target=\"_blank\" rel=\"noopener\">Number.isNaN - JavaScript | MDN</a></p>\n</blockquote>\n","prev":{"title":"JavaScript 模块化七日谈","slug":"2018-08-08-JavaScript模块化七日谈"},"next":{"title":"JS 中的深浅拷贝","slug":"2018-08-06-深浅拷贝"},"link":"/blog/post"}