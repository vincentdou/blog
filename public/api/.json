{"title":"你不知道的JS-作用域与闭包","date":"2018-05-13T16:00:00.000Z","author":"Vincent","link":"","comments":true,"tags":["JavaScript","你不知道的JS","前端开发"],"updated":"2019-01-02T08:49:00.266Z","content":"<blockquote>\n<p>尽管 JavaScript 一般被划分到“动态”或者“解释型”语言的范畴，但是其实它是一个编译型语言。</p>\n</blockquote>\n<h3 id=\"什么是作用域？\"><a href=\"#什么是作用域？\" class=\"headerlink\" title=\"什么是作用域？\"></a>什么是作用域？</h3><p>「编译」\b三步骤：</p>\n<ol>\n<li>分词/词法分析： 将一连串字符打断成（对于语言来说）有意义的片段，称为token（记号）。举例来说，考虑这段程序：<figure class=\"highlight plain\"><figcaption><span>a </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    &gt; 注意： 分词和词法分析之间的区别是微妙和学术上的，其中心在于这些 token 是否以 *无状态* 或 *有状态* 的方式被识别。简而言之，如果分词器去调用有状态的解析规则来弄清a是否应当被考虑为一个不同的 token，还是只是其他 token 的一部分，那么这就是 词法分析。</span><br><span class=\"line\"></span><br><span class=\"line\">2. 解析： 将一个 token 的流（数组）转换为一个嵌套元素的树，它总体上表示了程序的语法结构。这棵树称为 “AST”（Abstract Syntax Tree —— 抽象语法树）。</span><br><span class=\"line\"></span><br><span class=\"line\">    &gt; ```var a = 2;``` 的树也许开始于称为 VariableDeclaration（变量声明）顶层节点，带有一个称为 Identifier（标识符）的子节点（它的值为a），和另一个称为 AssignmentExpression（赋值表达式）的子节点，而这个子节点本身带有一个称为 NumericLiteral（数字字面量）的子节点（它的值为2）。</span><br><span class=\"line\"></span><br><span class=\"line\">3. 代码生成： 这个处理将 AST 转换为可执行的代码。这一部分将根据语言，它的目标平台等因素有很大的不同。</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 对于一个变量赋值，发生了两个不同的动作：第一，`编译器`声明一个变量（如果先前没有在当前作用域中声明过），第二，当执行时，`引擎`在`作用域`中查询这个变量并给它赋值，如果找到的话。</span><br><span class=\"line\"></span><br><span class=\"line\">#### LHS查询和RHS查询</span><br><span class=\"line\"></span><br><span class=\"line\">当一个变量出现在赋值操作的左手边时，会进行 LHS 查询，当一个变量出现在赋值操作的右手边时，会进行 RHS 查询。</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; “赋值的目标（LHS）” &amp; “赋值的源（RHS）”</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 将函数声明考虑为一个我们在这里讨论的 LHS 查询赋值是不太合适的</span><br><span class=\"line\"></span><br><span class=\"line\">**LHS查询**</span><br><span class=\"line\"></span><br><span class=\"line\">- 对变量进行赋值，就会使用 LHS 查询；</span><br><span class=\"line\">- `=`号操作符或调用函数时传入参数的操作都会导致关联作用域的赋值查询（LHS）；</span><br><span class=\"line\">- 不成功的 LHS 引用，非严格模式下会导致自动隐式创建一个全局变量，严格模式下或者抛出 ReferenceError 异常。</span><br><span class=\"line\"></span><br><span class=\"line\">**RHS查询**</span><br><span class=\"line\"></span><br><span class=\"line\">- 如果是获取变量的值，就会使用RHS查询；</span><br><span class=\"line\">- 不成功的 RHS 引用会导致抛出 ReferenceError异常。（即RHS查询在所有嵌套作用域到没找到所需变量）；</span><br><span class=\"line\">- 如果 RHS 查询到了一个变量，但是你尝试对这个变量进行不合理操作，比如对一个非函数类型的值进行函数调用，或者引用 null 或 undefined 类型的值中的属性，引擎就会抛出 TypeError 异常。</span><br><span class=\"line\"></span><br><span class=\"line\">### 词法作用域</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 词法作用域是 JavaScript 所采用的作用域模型</span><br><span class=\"line\"></span><br><span class=\"line\">在 JavaScript 中有两种机制可以“欺骗”词法作用域： ```eval(..)``` 和 ```with``` 。</span><br><span class=\"line\"></span><br><span class=\"line\">- JavaScript 中的`eval(..)`函数接收一个字符串作为参数值，并将这个字符串的内容看作是好像它已经被实际编写在程序的那个位置上。因此它会欺骗词法作用域。</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 当`eval(..)`被用于一个操作它自己的词法作用域的 strict 模式程序时，在`eval(..)`内部做出的声明不会实际上修改包围它的作用域。</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 在 JavaScript 中还有其他的工具拥有与`eval(..)`非常类似的效果。`setTimeout(..)`和`setInterval(..)`可以为它们各自的第一个参数值接收一个字符串，其内容将会被`eval`为一个动态生成的函数的代码。`new Function(..)`函数构造器类似地为它的最后一个参数值接收一个代码字符串，来把它转换为一个动态生成的函数（前面的参数值，如果有的话，将作为新函数的形式参数）。</span><br><span class=\"line\"></span><br><span class=\"line\">- with 的常见方式是作为一种缩写，来引用一个对象的多个属性，而不必每次都重复对象引用本身。</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 尽管一个`with`块儿将一个对象视为一个词法作用域，但是在`with`块儿内部的一个普通`var`声明将不会归于这个`with`块儿的作用域，而是归于包含它的函数作用域。</span><br><span class=\"line\">&gt; 如果`eval(..)`函数接收一个含有一个或多个声明的代码字符串，它就会修改现存的词法作用域，而`with`语句实际上是从你传递给它的对象中凭空制造了一个全新的词法作用域。</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; strict 模式下`with`不允许使用</span><br><span class=\"line\"></span><br><span class=\"line\">这些机制的缺点是，它压制了*引擎*在作用域查询上进行编译期优化的能力，因为引擎不得不悲观地假定这样的优化是不合法的。这两种特性的结果就是代码将会运行的更慢。不要使用它们。</span><br><span class=\"line\"></span><br><span class=\"line\">### 函数与块儿作用域</span><br><span class=\"line\"></span><br><span class=\"line\">在 JavaScript 中函数是最常见的作用域单位。在另一个函数内部声明的变量和函数，实质上对任何外围“作用域”都是“隐藏的”，这是优秀软件的一个有意的设计原则。</span><br><span class=\"line\"></span><br><span class=\"line\">从ES3开始，`try/catch`结构在`catch`子句上拥有块儿作用域。</span><br><span class=\"line\"></span><br><span class=\"line\">在ES6中，引入了`let`关键字（var 关键字的表兄弟）允许在任意代码块中声明变量。使用`let`做出的声明将不会在它们所出现的整个块儿的作用域中提升。</span><br><span class=\"line\"></span><br><span class=\"line\">**函数声明** **函数表达式**</span><br><span class=\"line\"></span><br><span class=\"line\">#### IIFE(立即被调用函数表达)</span><br><span class=\"line\"></span><br><span class=\"line\">Immediately Invoked Function Expression</span><br><span class=\"line\"></span><br><span class=\"line\">`(function foo()&#123; .. &#125;)()`第一个外围的`()`使这个函数变成表达式，而第二个`()`执行这个函数。</span><br><span class=\"line\"></span><br><span class=\"line\">### 提升</span><br><span class=\"line\"></span><br><span class=\"line\">JavaScript 引擎会\b将`var a = 2`看作`var a`和`a = 2`两个分离的语句，第一个是编译期的任务，而第二个是执行时的任务。</span><br><span class=\"line\"></span><br><span class=\"line\">这将导致在一个作用域内的所有声明，不论它们出现在何处，都会在代码本身被执行前 首先 被处理。你可以将它可视化为声明（变量与函数）被“移动”到它们 **各自** 的作用域顶部（不是程序的顶端），这就是我们所说的“提升”。</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 只有声明本身被提升了，而任何赋值或者其他的执行逻辑都被留在原处。提升是以作用域为单位的。</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; **函数声明会被提升，但是函数表达式不会。**</span><br><span class=\"line\"></span><br><span class=\"line\">```js</span><br><span class=\"line\">foo(); // TypeError</span><br><span class=\"line\">bar(); // ReferenceError</span><br><span class=\"line\"></span><br><span class=\"line\">var foo = function bar() &#123;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>这个代码段可以（使用提升）更准确地解释为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo;</span><br><span class=\"line\"></span><br><span class=\"line\">foo(); <span class=\"comment\">// TypeError</span></span><br><span class=\"line\">bar(); <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\"></span><br><span class=\"line\">foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bar = ...self...</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"函数会首先被提升，然后才是变量。\"><a href=\"#函数会首先被提升，然后才是变量。\" class=\"headerlink\" title=\"函数会首先被提升，然后才是变量。\"></a>函数会首先被提升，然后才是变量。</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo(); <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log( <span class=\"number\">1</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log( <span class=\"number\">2</span> );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>1 被打印了，而不是 2，这个代码段被引擎解释执行为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log( <span class=\"number\">1</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo(); <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log( <span class=\"number\">2</span> );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>var foo</code>是一个重复（因此被无视）的声明，即便它出现在<code>function foo()...</code>声明之前，因为函数声明是在普通变量之前被提升的。</p>\n<blockquote>\n<p>后续的函数声明会覆盖前一个</p>\n</blockquote>\n<blockquote>\n<p>普通的块儿作用域里的函数声明一般会被提升至外围的作用域</p>\n</blockquote>\n<h3 id=\"作用域闭包\"><a href=\"#作用域闭包\" class=\"headerlink\" title=\"作用域闭包\"></a>作用域闭包</h3><ul>\n<li><p>当函数是在当前词法作用域之外执行，如果函数可以记住并访问所在的词法作用域时，就产生了闭包。</p>\n</li>\n<li><p>计时器、事件处理器、Ajax请求、跨窗口消息、web worker、或者任何其他的异步（或同步！）任务，当你传入一个回调函数，你就在它周围悬挂了一些闭包！</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j</span>)</span>&#123;</span><br><span class=\"line\">\t\tsetTimeout( <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log( j );</span><br><span class=\"line\">\t\t&#125;, j*<span class=\"number\">1000</span> );</span><br><span class=\"line\">\t&#125;)( i );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>模块要求两个关键性质：</p>\n<ol>\n<li><p>必须有一个外部的外围函数，而且它必须至少被调用一次（每次创建一个新的模块实例）。</p>\n</li>\n<li><p>外围的函数必须至少返回一个内部函数，这样这个内部函数才拥有私有作用域的闭包，并且可以访问和/或修改这个私有状态。</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CoolModule</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> something = <span class=\"string\">\"cool\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> another = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log( something );</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doAnother</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log( another.join( <span class=\"string\">\" ! \"</span> ) );</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\tdoSomething: doSomething,</span><br><span class=\"line\">\t\tdoAnother: doAnother</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">foo.doSomething(); <span class=\"comment\">// cool</span></span><br><span class=\"line\">foo.doAnother(); <span class=\"comment\">// 1 ! 2 ! 3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MyModules = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Manager</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> modules = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">define</span>(<span class=\"params\">name, deps, impl</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;deps.length; i++) &#123;</span><br><span class=\"line\">\t\t\tdeps[i] = modules[deps[i]];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmodules[name] = impl.apply( impl, deps );</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> modules[name];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\tdefine: define,</span><br><span class=\"line\">\t\tget: get</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyModules.define( <span class=\"string\">\"bar\"</span>, [], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">who</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Let me introduce: \"</span> + who;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\thello: hello</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\"></span><br><span class=\"line\">MyModules.define( <span class=\"string\">\"foo\"</span>, [<span class=\"string\">\"bar\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">bar</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> hungry = <span class=\"string\">\"hippo\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">awesome</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log( bar.hello( hungry ).toUpperCase() );</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\tawesome: awesome</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = MyModules.get( <span class=\"string\">\"bar\"</span> );</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = MyModules.get( <span class=\"string\">\"foo\"</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">\tbar.hello( <span class=\"string\">\"hippo\"</span> )</span><br><span class=\"line\">); <span class=\"comment\">// Let me introduce: hippo</span></span><br><span class=\"line\"></span><br><span class=\"line\">foo.awesome(); <span class=\"comment\">// LET ME INTRODUCE: HIPPO</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"ES6中的模块\"><a href=\"#ES6中的模块\" class=\"headerlink\" title=\"ES6中的模块\"></a>ES6中的模块</h4><ul>\n<li>import 在当前的作用域中导入一个模块的 API 的一个或多个成员，每个都绑定到一个变量；</li>\n<li>module 将整个模块的 API 导入到一个被绑定的变量；</li>\n<li>export 为当前模块的公有API导出一个标识符（变量，函数）。在一个模块的定义中，这些操作符可以根据需要使用任意多次。</li>\n</ul>\n<h3 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h3><h4 id=\"动态作用域\"><a href=\"#动态作用域\" class=\"headerlink\" title=\"动态作用域\"></a>动态作用域</h4><ul>\n<li>词法作用域是一组关于引擎如何查询变量和它在何处能够找到变量的规则。词法作用域的关键性质是，它是在代码编写时被定义的。</li>\n<li>动态作用域是在运行时被确定的，它的作用域链条是基于调用栈的，而不是代码中作用域的嵌套。</li>\n<li>两者的关键差异是：词法作用域是编写时的，而动态作用域（和 this）是运行时的。词法作用域关心的是函数在何处被声明，但是动态作用域关心的是函数从何处被调用。</li>\n<li>JavaScript 没有动态作用域，但是 this 机制有些像动态作用域。</li>\n</ul>\n<h4 id=\"填补块儿作用域\"><a href=\"#填补块儿作用域\" class=\"headerlink\" title=\"填补块儿作用域\"></a>填补块儿作用域</h4><p>ES6 才提出了 let，而早在 ES3 的<code>try/catch</code>就已经有了块儿作用域。我们想在前 ES6 环境中使用块儿作用域可以这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES6 let</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// ReferenceError</span></span><br></pre></td></tr></table></figure>\n<p>转为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES3 try/catch</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123;<span class=\"keyword\">throw</span> <span class=\"number\">2</span>&#125;<span class=\"keyword\">catch</span>(a)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// ReferenceError</span></span><br></pre></td></tr></table></figure>\n<p>Traceur的转移结果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (a) &#123;</span><br><span class=\"line\">\t\ta = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log( a );</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( a );</span><br></pre></td></tr></table></figure>\n","prev":{"title":"你不知道的JS-this与对象原型-this","link":""}}